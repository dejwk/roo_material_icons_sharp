#include "content.h"

using namespace roo_display;

// Image file ic_sharp_48_content_add_box 48x48, 4-bit Alpha,  RLE, 108 bytes.
static const uint8_t ic_sharp_48_content_add_box_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0x84, 0xDA, 0x10, 0x1E, 0xFF, 0xFF, 0xC8, 0x1E, 0x1A, 0xFF, 0xFF,
  0xE0, 0xA0, 0xDF, 0xFF, 0xFE, 0x0D, 0x80, 0xAB, 0x4F, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F,
  0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF,
  0xB7, 0x76, 0xFF, 0xA7, 0x76, 0xFF, 0xA7, 0x76, 0xFF, 0xA7, 0x76, 0xFF, 0xFB, 0x4F, 0xFF, 0xFC,
  0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F,
  0xFF, 0xFC, 0x48, 0x0A, 0xB4, 0xF0, 0xDF, 0xFF, 0xFE, 0x0D, 0x0A, 0xFF, 0xFF, 0xE8, 0x1A, 0x1E,
  0xFF, 0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF, 0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_add_box() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_add_box_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_add_circle_outline 48x48, 4-bit Alpha,  RLE, 319 bytes.
static const uint8_t ic_sharp_48_content_add_circle_outline_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xF8, 0x2B, 0x63, 0x22, 0x82, 0x23, 0x6B, 0xF0, 0x97, 0x60, 0xAD, 0x0E, 0x06, 0x75, 0x06,
  0x0E, 0xD0, 0xA7, 0x40, 0xAD, 0x07, 0x77, 0x20, 0x7D, 0x0A, 0x72, 0x09, 0xC0, 0xE0, 0x37, 0x74,
  0x03, 0x0E, 0xC0, 0x97, 0x05, 0xC0, 0xC0, 0x17, 0x76, 0x01, 0x0C, 0xC0, 0x55, 0x01, 0x0E, 0xB0,
  0xE0, 0x17, 0x77, 0x10, 0x10, 0xEB, 0x0E, 0x01, 0x40, 0x9C, 0x03, 0x73, 0xC7, 0x30, 0x3C, 0x09,
  0x30, 0x1C, 0x07, 0x74, 0xC7, 0x40, 0x7C, 0x01, 0x20, 0x8B, 0x0E, 0x75, 0xC7, 0x50, 0xEB, 0x08,
  0x20, 0xDB, 0x06, 0x75, 0xC7, 0x50, 0x6B, 0x81, 0xD0, 0x3C, 0x76, 0xC7, 0x6C, 0x03, 0x07, 0xB0,
  0xB7, 0x6C, 0x76, 0x0B, 0xB0, 0x70, 0xAB, 0x06, 0x76, 0xC7, 0x60, 0x6B, 0x0A, 0x0C, 0xB0, 0x37,
  0x6C, 0x76, 0x03, 0xB0, 0xC0, 0xEB, 0x02, 0x5F, 0xFE, 0x50, 0x2B, 0x0E, 0xC6, 0xFF, 0xE6, 0xF9,
  0x6F, 0xFE, 0x6C, 0x0E, 0xB0, 0x25, 0xFF, 0xE5, 0x02, 0xB0, 0xE0, 0xCB, 0x03, 0x76, 0xC7, 0x60,
  0x3B, 0x0C, 0x0A, 0xB0, 0x67, 0x6C, 0x76, 0x06, 0xB0, 0xA0, 0x7B, 0x0B, 0x76, 0xC7, 0x60, 0xBB,
  0x07, 0x03, 0xC7, 0x6C, 0x76, 0xC8, 0x13, 0x0D, 0xB0, 0x67, 0x5C, 0x75, 0x06, 0xB0, 0xD2, 0x08,
  0xB0, 0xE7, 0x5C, 0x75, 0x0E, 0xB0, 0x82, 0x01, 0xC0, 0x77, 0x4C, 0x74, 0x07, 0xC0, 0x13, 0x09,
  0xC0, 0x37, 0x3C, 0x73, 0x03, 0xC0, 0x94, 0x01, 0x0E, 0xB0, 0xE0, 0x17, 0x77, 0x10, 0x10, 0xEB,
  0x0E, 0x01, 0x50, 0x5C, 0x0C, 0x01, 0x77, 0x60, 0x10, 0xCC, 0x05, 0x70, 0x9C, 0x0E, 0x03, 0x77,
  0x40, 0x30, 0xEC, 0x09, 0x72, 0x0A, 0xD0, 0x77, 0x72, 0x07, 0xD0, 0xA7, 0x40, 0xAD, 0x0E, 0x06,
  0x75, 0x06, 0x0E, 0xD0, 0xA7, 0x60, 0x9F, 0x82, 0xB6, 0x32, 0x28, 0x22, 0x36, 0xBF, 0x09, 0x77,
  0x10, 0x50, 0xEF, 0xFE, 0x0E, 0x05, 0x77, 0x30, 0x10, 0x9F, 0xFC, 0x09, 0x01, 0x77, 0x68, 0x11,
  0x8D, 0xFD, 0x81, 0xD8, 0x17, 0x77, 0x48, 0x33, 0x7A, 0xCD, 0xA8, 0x3D, 0xCA, 0x73, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_add_circle_outline() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_add_circle_outline_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_add_circle 48x48, 4-bit Alpha,  RLE, 238 bytes.
static const uint8_t ic_sharp_48_content_add_circle_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xFF, 0xFB, 0x09, 0x76, 0x0A, 0xFF, 0xFD, 0x0A, 0x74, 0x0A, 0xFF, 0xFF, 0x0A, 0x72, 0x09,
  0xFF, 0xFF, 0xA0, 0x97, 0x05, 0xFF, 0xFF, 0xC0, 0x55, 0x01, 0x0E, 0xFF, 0xFF, 0xC0, 0xE0, 0x14,
  0x09, 0xFF, 0x94, 0xFF, 0x90, 0x93, 0x01, 0xFF, 0xA4, 0xFF, 0xA0, 0x12, 0x08, 0xFF, 0xA4, 0xFF,
  0xA0, 0x82, 0x0D, 0xFF, 0xA4, 0xFF, 0xA8, 0x1D, 0x03, 0xFF, 0xB4, 0xFF, 0xB0, 0x30, 0x7F, 0xFB,
  0x4F, 0xFB, 0x07, 0x0A, 0xFF, 0xB4, 0xFF, 0xB0, 0xA0, 0xCF, 0xFB, 0x4F, 0xFB, 0x0C, 0x0E, 0xFA,
  0x77, 0x6F, 0xA0, 0xEF, 0xB7, 0x76, 0xFF, 0xE7, 0x76, 0xFB, 0x0E, 0xFA, 0x77, 0x6F, 0xA0, 0xE0,
  0xCF, 0xFB, 0x4F, 0xFB, 0x0C, 0x0A, 0xFF, 0xB4, 0xFF, 0xB0, 0xA0, 0x7F, 0xFB, 0x4F, 0xFB, 0x07,
  0x03, 0xFF, 0xB4, 0xFF, 0xB8, 0x13, 0x0D, 0xFF, 0xA4, 0xFF, 0xA0, 0xD2, 0x08, 0xFF, 0xA4, 0xFF,
  0xA0, 0x82, 0x01, 0xFF, 0xA4, 0xFF, 0xA0, 0x13, 0x09, 0xFF, 0x94, 0xFF, 0x90, 0x94, 0x01, 0x0E,
  0xFF, 0xFF, 0xC0, 0xE0, 0x15, 0x05, 0xFF, 0xFF, 0xC0, 0x57, 0x09, 0xFF, 0xFF, 0xA0, 0x97, 0x20,
  0xAF, 0xFF, 0xF0, 0xA7, 0x40, 0xAF, 0xFF, 0xD0, 0xA7, 0x60, 0x9F, 0xFF, 0xB0, 0x97, 0x71, 0x05,
  0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x73, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x76, 0x81, 0x18, 0xDF,
  0xD8, 0x1D, 0x81, 0x77, 0x74, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_add_circle() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_add_circle_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_add_link 48x48, 4-bit Alpha,  RLE, 159 bytes.
static const uint8_t ic_sharp_48_content_add_link_data[] PROGMEM = {
  0x68, 0x25, 0x9D, 0xEF, 0x94, 0xF9, 0x82, 0xED, 0x95, 0x73, 0x04, 0x0D, 0xFD, 0x4F, 0xD0, 0xD0,
  0x47, 0x08, 0xFF, 0x4F, 0xF0, 0x85, 0x08, 0xD0, 0xE0, 0xD8, 0x04, 0xB4, 0x80, 0x4B, 0x0D, 0x0E,
  0xD0, 0x83, 0x04, 0xC0, 0xD0, 0x57, 0x77, 0x30, 0x50, 0xDC, 0x04, 0x20, 0xDB, 0x0B, 0x77, 0x77,
  0x0B, 0xB8, 0x1D, 0x05, 0xB0, 0xD7, 0x77, 0x72, 0x0D, 0xB0, 0x50, 0x9B, 0x05, 0x77, 0x77, 0x20,
  0x5B, 0x09, 0x0D, 0xB7, 0x1F, 0xFA, 0x71, 0xB0, 0xD0, 0xEA, 0x0D, 0x71, 0xFF, 0xA7, 0x10, 0xDA,
  0x00, 0xEA, 0x0D, 0x71, 0xFF, 0xA2, 0xC6, 0x0D, 0xB7, 0x1F, 0xFA, 0x2C, 0x60, 0x9B, 0x05, 0x77,
  0x74, 0xC6, 0x05, 0xB0, 0xD7, 0x77, 0x4C, 0x70, 0xDB, 0x0B, 0x77, 0x73, 0xC7, 0x04, 0xC0, 0xD0,
  0x57, 0x77, 0x1C, 0x71, 0x08, 0xD0, 0xE0, 0xD8, 0x04, 0xB6, 0xFF, 0xA3, 0x08, 0xFF, 0x6F, 0xFA,
  0x40, 0x40, 0xDF, 0xD6, 0xFF, 0xA6, 0x82, 0x59, 0xDE, 0xF9, 0x6F, 0xFA, 0x77, 0x77, 0x2C, 0x80,
  0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x60,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_add_link() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 14, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_add_link_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_add 48x48, 4-bit Alpha,  RLE, 63 bytes.
static const uint8_t ic_sharp_48_content_add_data[] PROGMEM = {
  0x75, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73,
  0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x75, 0x80, 0x9D,
  0x4F, 0x75, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77,
  0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x77, 0x73, 0xC7, 0x77, 0x3C, 0x75,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_add() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 10, 37, 37), Box(0, 0, 47, 47),
      ic_sharp_48_content_add_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_amp_stories 48x48, 4-bit Alpha,  RLE, 102 bytes.
static const uint8_t ic_sharp_48_content_amp_stories_data[] PROGMEM = {
  0x71, 0xFF, 0xE7, 0x72, 0xFF, 0xE7, 0x72, 0xFF, 0xE7, 0x72, 0xFF, 0xE7, 0x1C, 0x4F, 0xFE, 0x4F,
  0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF,
  0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9,
  0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE,
  0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94,
  0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xC7, 0x1F, 0xFE, 0x77, 0x2F, 0xFE, 0x77,
  0x2F, 0xFE, 0x77, 0x2F, 0xFE, 0x71,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_amp_stories() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 8, 41, 37), Box(0, 0, 47, 47),
      ic_sharp_48_content_amp_stories_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_archive 48x48, 4-bit Alpha,  RLE, 132 bytes.
static const uint8_t ic_sharp_48_content_archive_data[] PROGMEM = {
  0x40, 0x80, 0xEF, 0xFF, 0xB0, 0xE0, 0x87, 0x09, 0xFF, 0xFF, 0x09, 0x50, 0x7A, 0x07, 0x77, 0x73,
  0x0A, 0xA0, 0x73, 0x04, 0xA0, 0x97, 0x77, 0x50, 0xBA, 0x82, 0x40, 0x2E, 0xFF, 0xFF, 0xC8, 0x1E,
  0x2A, 0xFF, 0xFF, 0xE0, 0xA0, 0xEF, 0xFF, 0xFE, 0x0E, 0x80, 0xC8, 0x6F, 0x71, 0xFF, 0xFF, 0x71,
  0xFF, 0xFF, 0x71, 0xFF, 0xFF, 0x71, 0xFF, 0xF0, 0x77, 0x76, 0x07, 0xFF, 0x90, 0x77, 0x74, 0x07,
  0xFF, 0xB0, 0x77, 0x72, 0x07, 0xFF, 0xD0, 0x77, 0x70, 0x7F, 0xFF, 0x07, 0x75, 0x07, 0xFF, 0xFA,
  0x07, 0x73, 0x07, 0xFF, 0xFC, 0x07, 0x71, 0x07, 0xFF, 0xFE, 0x07, 0x60, 0x7F, 0xFF, 0xF9, 0x07,
  0x40, 0x7F, 0xFF, 0xFB, 0x07, 0x20, 0x7F, 0xFF, 0xFD, 0x00, 0x78, 0x09, 0xF1, 0xF0, 0xDF, 0xFF,
  0xFE, 0x0D, 0x0A, 0xFF, 0xFF, 0xE8, 0x1A, 0x1E, 0xFF, 0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF,
  0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_archive() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_archive_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_attribution 48x48, 4-bit Alpha,  RLE, 383 bytes.
static const uint8_t ic_sharp_48_content_attribution_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xEA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xF8, 0x2B, 0x63, 0x22, 0x82, 0x23, 0x6B, 0xF0, 0x97, 0x60, 0xBD, 0x0D, 0x06, 0x75, 0x06,
  0x0D, 0xD0, 0xA7, 0x40, 0xBD, 0x07, 0x68, 0x28, 0xDD, 0x86, 0x07, 0xD0, 0xA7, 0x20, 0x9C, 0x0D,
  0x03, 0x60, 0x8C, 0x08, 0x60, 0x30, 0xDC, 0x09, 0x70, 0x5C, 0x0C, 0x01, 0x70, 0xDC, 0x0D, 0x70,
  0x10, 0xCC, 0x05, 0x50, 0x10, 0xEB, 0x0D, 0x01, 0x71, 0x0D, 0xC0, 0xD7, 0x10, 0x10, 0xDB, 0x0E,
  0x01, 0x40, 0x9C, 0x03, 0x72, 0x08, 0xC0, 0x87, 0x20, 0x3C, 0x09, 0x30, 0x1C, 0x07, 0x74, 0x82,
  0x8D, 0xD8, 0x74, 0x07, 0xC0, 0x12, 0x08, 0xB0, 0xD7, 0x77, 0x70, 0xDB, 0x08, 0x20, 0xDB, 0x06,
  0x73, 0x86, 0x39, 0xCE, 0xFC, 0x83, 0x73, 0x06, 0xB8, 0x1D, 0x03, 0xC7, 0x30, 0xBF, 0x90, 0xB7,
  0x3C, 0x03, 0x07, 0xB0, 0xB7, 0x20, 0x6F, 0xB0, 0x67, 0x20, 0xBB, 0x07, 0x0A, 0xB0, 0x67, 0x20,
  0x7F, 0xB0, 0x77, 0x20, 0x6B, 0x0A, 0x0C, 0xB0, 0x37, 0x20, 0x7F, 0xB0, 0x77, 0x20, 0x3B, 0x0C,
  0x0E, 0xB0, 0x27, 0x20, 0x7F, 0xB0, 0x77, 0x20, 0x2B, 0x0E, 0xC7, 0x30, 0x7F, 0xB0, 0x77, 0x3F,
  0x97, 0x30, 0x7F, 0xB0, 0x77, 0x3C, 0x0E, 0xB0, 0x27, 0x20, 0x7F, 0xB0, 0x77, 0x20, 0x2B, 0x0E,
  0x0C, 0xB0, 0x37, 0x20, 0x7F, 0xB0, 0x77, 0x20, 0x3B, 0x0C, 0x0A, 0xB0, 0x67, 0x20, 0x7F, 0xB0,
  0x77, 0x20, 0x6B, 0x0A, 0x07, 0xB0, 0xB7, 0x20, 0x7F, 0xB0, 0x77, 0x20, 0xBB, 0x07, 0x03, 0xC7,
  0x50, 0x7C, 0x07, 0x75, 0xC8, 0x13, 0x0D, 0xB0, 0x67, 0x40, 0x7C, 0x07, 0x74, 0x06, 0xB0, 0xD2,
  0x08, 0xB0, 0xD7, 0x40, 0x7C, 0x07, 0x74, 0x0D, 0xB0, 0x82, 0x01, 0xC0, 0x77, 0x30, 0x7C, 0x07,
  0x73, 0x07, 0xC0, 0x13, 0x09, 0xC0, 0x37, 0x20, 0x7C, 0x07, 0x72, 0x03, 0xC0, 0x94, 0x01, 0x0E,
  0xB0, 0xD0, 0x17, 0x10, 0x7C, 0x07, 0x71, 0x01, 0x0D, 0xB0, 0xE0, 0x15, 0x05, 0xC0, 0xC0, 0x17,
  0x07, 0xC0, 0x77, 0x01, 0x0C, 0xC0, 0x57, 0x09, 0xC0, 0xD0, 0x36, 0x07, 0xC0, 0x76, 0x03, 0x0D,
  0xC0, 0x97, 0x20, 0xBD, 0x07, 0x50, 0x7C, 0x07, 0x50, 0x7D, 0x0B, 0x74, 0x0B, 0xD0, 0xD0, 0x67,
  0x50, 0x60, 0xDD, 0x0B, 0x76, 0x09, 0xF8, 0x2B, 0x63, 0x22, 0x82, 0x23, 0x6B, 0xF0, 0x97, 0x71,
  0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x73, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x76, 0x81, 0x18,
  0xDF, 0xD8, 0x1D, 0x81, 0x77, 0x74, 0x83, 0x37, 0xAC, 0xEA, 0x83, 0xDC, 0xA7, 0x37, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_attribution() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_attribution_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_backspace 48x48, 4-bit Alpha,  RLE, 269 bytes.
static const uint8_t ic_sharp_48_content_backspace_data[] PROGMEM = {
  0x74, 0x81, 0x1A, 0xEF, 0xFF, 0xFA, 0x81, 0xDA, 0x17, 0x40, 0x10, 0xDF, 0xFF, 0xFE, 0x0E, 0x01,
  0x73, 0x0A, 0x80, 0xC0, 0xF0, 0xA7, 0x20, 0x58, 0x0C, 0x1F, 0x0D, 0x71, 0x01, 0x0E, 0x80, 0xC2,
  0xF7, 0x10, 0xA8, 0x0C, 0x3F, 0x70, 0x58, 0x0C, 0x4F, 0x60, 0x10, 0xE8, 0x0C, 0x4F, 0x60, 0xAF,
  0xE0, 0x50, 0xAF, 0xD0, 0xA0, 0x5F, 0xD5, 0x05, 0xFE, 0x05, 0x20, 0xAF, 0xB0, 0xA2, 0x05, 0xFC,
  0x40, 0x10, 0xEF, 0xD0, 0x54, 0x0A, 0xF9, 0x0A, 0x40, 0x5F, 0xB4, 0x0A, 0xFE, 0x0A, 0x50, 0xAE,
  0x0A, 0x50, 0xAF, 0xB3, 0x05, 0xFF, 0x90, 0xA5, 0x0A, 0xC0, 0xA5, 0x0A, 0xFC, 0x20, 0x10, 0xEF,
  0xFA, 0x0A, 0x50, 0xAA, 0x0A, 0x50, 0xAF, 0xD2, 0x0A, 0xFF, 0xC0, 0xA5, 0x00, 0xA5, 0x0A, 0xFE,
  0x10, 0x5F, 0xFE, 0x0A, 0x73, 0x0A, 0xFF, 0x01, 0x0E, 0xFF, 0xF0, 0xA7, 0x10, 0xAF, 0xF9, 0x0A,
  0xFF, 0xFA, 0x0A, 0x60, 0xAF, 0xFA, 0x0A, 0xFF, 0xFA, 0x0A, 0x60, 0xAF, 0xFA, 0x01, 0x0E, 0xFF,
  0xF0, 0xA7, 0x10, 0xAF, 0xF9, 0x10, 0x5F, 0xFE, 0x0A, 0x73, 0x0A, 0xFF, 0x20, 0xAF, 0xFC, 0x0A,
  0x50, 0x0A, 0x50, 0xAF, 0xE2, 0x01, 0x0E, 0xFF, 0xA0, 0xA5, 0x0A, 0xA0, 0xA5, 0x0A, 0xFD, 0x30,
  0x5F, 0xF9, 0x0A, 0x50, 0xAC, 0x0A, 0x50, 0xAF, 0xC4, 0x0A, 0xFE, 0x0A, 0x50, 0xAE, 0x0A, 0x50,
  0xAF, 0xB4, 0x01, 0x0E, 0xFD, 0x05, 0x40, 0xAF, 0x90, 0xA4, 0x05, 0xFB, 0x50, 0x5F, 0xE0, 0x52,
  0x0A, 0xFB, 0x0A, 0x20, 0x5F, 0xC6, 0x0A, 0xFE, 0x05, 0x0A, 0xFD, 0x0A, 0x05, 0xFD, 0x60, 0x10,
  0xE8, 0x0C, 0x4F, 0x70, 0x58, 0x0C, 0x4F, 0x71, 0x0A, 0x80, 0xC3, 0xF7, 0x10, 0x10, 0xE8, 0x0C,
  0x2F, 0x72, 0x05, 0x80, 0xC1, 0xF0, 0xD7, 0x30, 0xA8, 0x0C, 0x0F, 0x0A, 0x73, 0x01, 0x0D, 0xFF,
  0xFF, 0xE0, 0xE0, 0x17, 0x48, 0x11, 0x9E, 0xFF, 0xFF, 0xA8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_backspace() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(0, 6, 47, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_backspace_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_ballot 48x48, 4-bit Alpha,  RLE, 119 bytes.
static const uint8_t ic_sharp_48_content_ballot_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0x84, 0xDA, 0x10, 0x1E, 0xFF, 0xFF, 0xC8, 0x1E, 0x1A, 0xFF, 0xFF,
  0xE0, 0xA0, 0xDF, 0xFF, 0xFE, 0x0D, 0x80, 0x99, 0x2F, 0x73, 0xFF, 0xFD, 0x73, 0xFF, 0xFD, 0x2E,
  0x2F, 0xFF, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2,
  0xC7, 0x3F, 0xD2, 0xE2, 0xFF, 0xFD, 0x73, 0xFF, 0xFD, 0x73, 0x80, 0xAC, 0x6F, 0x73, 0xFF, 0xFD,
  0x73, 0xFF, 0xFD, 0x2E, 0x2F, 0xFF, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2,
  0xC7, 0x3F, 0xD2, 0xE2, 0xC7, 0x3F, 0xD2, 0xE2, 0xFF, 0xFD, 0x73, 0xFF, 0xFD, 0x73, 0x80, 0x9B,
  0x0F, 0x0D, 0xFF, 0xFF, 0xE0, 0xD0, 0xAF, 0xFF, 0xFE, 0x81, 0xA1, 0xEF, 0xFF, 0xFC, 0x84, 0xE1,
  0x01, 0xAD, 0xFF, 0xFF, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_ballot() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_ballot_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_biotech 48x48, 4-bit Alpha,  RLE, 207 bytes.
static const uint8_t ic_sharp_48_content_biotech_data[] PROGMEM = {
  0x75, 0x82, 0x17, 0xC2, 0x77, 0x72, 0x08, 0xB8, 0x18, 0x67, 0x77, 0x70, 0x6D, 0x0E, 0x77, 0x60,
  0x30, 0xAE, 0x05, 0x77, 0x50, 0xCF, 0x0B, 0x77, 0x50, 0x6F, 0x90, 0x17, 0x74, 0x01, 0xF9, 0x06,
  0x77, 0x58, 0x11, 0x4B, 0xD0, 0xC7, 0x77, 0x10, 0x7D, 0x02, 0x77, 0x28, 0x28, 0xDD, 0x82, 0x0A,
  0xC0, 0x87, 0x71, 0x08, 0xC8, 0x18, 0x03, 0xC0, 0xD7, 0x48, 0x34, 0xD1, 0x0D, 0xC0, 0xD2, 0xD0,
  0x47, 0x20, 0x8A, 0x81, 0x10, 0xDC, 0x0D, 0x2D, 0x09, 0x71, 0x08, 0xB8, 0x14, 0x08, 0xC8, 0x18,
  0x04, 0xD0, 0xE7, 0x04, 0xC0, 0xB2, 0x82, 0x8D, 0xD8, 0x20, 0xBE, 0x05, 0x60, 0xDB, 0x0E, 0x03,
  0x70, 0x6F, 0x0B, 0x50, 0x5C, 0x03, 0x71, 0x06, 0xE0, 0xC0, 0x65, 0x0A, 0xB0, 0x97, 0x20, 0x1E,
  0x05, 0x60, 0xDB, 0x03, 0x73, 0x81, 0x99, 0xAB, 0x09, 0x60, 0xEB, 0x01, 0x75, 0x82, 0x3E, 0xA4,
  0x70, 0xEB, 0x77, 0x73, 0x0D, 0xB0, 0x37, 0x77, 0x20, 0x9B, 0x08, 0x77, 0x72, 0x05, 0xC0, 0x27,
  0x77, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x71, 0x04, 0xD0, 0x80, 0x37, 0x77, 0x08, 0xFF, 0xF9, 0x0D,
  0x50, 0x8F, 0xFF, 0x0A, 0x60, 0x40, 0xDF, 0xFC, 0x0E, 0x01, 0x71, 0x82, 0x59, 0xDE, 0xFD, 0x81,
  0xDA, 0x17, 0x6E, 0x77, 0x71, 0xE7, 0x77, 0x1E, 0x77, 0x71, 0xE7, 0x68, 0x11, 0xAD, 0xFF, 0xE8,
  0x4D, 0xA1, 0x01, 0xEF, 0xFF, 0xB8, 0x1E, 0x1A, 0xFF, 0xFD, 0x0A, 0x0D, 0xFF, 0xFD, 0x0D,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_biotech() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 4, 37, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_biotech_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_block_flipped 48x48, 4-bit Alpha,  RLE, 354 bytes.
static const uint8_t ic_sharp_48_content_block_flipped_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x08, 0xFF, 0xC0, 0x80, 0x17, 0x73, 0x04, 0x0E, 0xFF, 0xE0, 0xE0, 0x47, 0x71,
  0x08, 0xE8, 0x3E, 0xA6, 0x31, 0x28, 0x22, 0x36, 0xBF, 0x08, 0x76, 0x0A, 0xD0, 0xD0, 0x67, 0x50,
  0x60, 0xED, 0x0A, 0x74, 0x0A, 0xD0, 0x77, 0x72, 0x07, 0xD0, 0xA7, 0x20, 0x8D, 0x07, 0x77, 0x40,
  0x30, 0xEC, 0x08, 0x70, 0x4F, 0x04, 0x77, 0x40, 0x10, 0xCC, 0x04, 0x50, 0x10, 0xEF, 0x90, 0x47,
  0x74, 0x01, 0x0E, 0xB0, 0xE0, 0x14, 0x08, 0xC0, 0x7D, 0x04, 0x77, 0x40, 0x3C, 0x08, 0x30, 0x1C,
  0x81, 0x70, 0x4D, 0x04, 0x77, 0x40, 0x7C, 0x01, 0x20, 0x7B, 0x0D, 0x30, 0x4D, 0x04, 0x77, 0x40,
  0xEB, 0x07, 0x20, 0xDB, 0x06, 0x40, 0x4D, 0x04, 0x77, 0x30, 0x6B, 0x81, 0xD0, 0x3B, 0x0E, 0x60,
  0x4D, 0x04, 0x77, 0x3C, 0x03, 0x07, 0xB0, 0xA7, 0x04, 0xD0, 0x47, 0x72, 0x0B, 0xB0, 0x70, 0xAB,
  0x06, 0x71, 0x04, 0xD0, 0x47, 0x71, 0x06, 0xB0, 0xA0, 0xCB, 0x03, 0x72, 0x04, 0xD0, 0x47, 0x70,
  0x3B, 0x0C, 0x0E, 0xB0, 0x17, 0x30, 0x4D, 0x04, 0x76, 0x02, 0xB0, 0xEC, 0x75, 0x04, 0xD0, 0x47,
  0x6F, 0x97, 0x60, 0x4D, 0x04, 0x75, 0xC0, 0xEB, 0x02, 0x76, 0x04, 0xD0, 0x47, 0x30, 0x1B, 0x0E,
  0x0C, 0xB0, 0x37, 0x70, 0x4D, 0x04, 0x72, 0x03, 0xB0, 0xC0, 0xAB, 0x06, 0x77, 0x10, 0x4D, 0x04,
  0x71, 0x06, 0xB0, 0xA0, 0x7B, 0x0B, 0x77, 0x20, 0x4D, 0x04, 0x70, 0xAB, 0x07, 0x03, 0xC7, 0x73,
  0x04, 0xD0, 0x46, 0x0E, 0xB8, 0x13, 0x0D, 0xB0, 0x67, 0x73, 0x04, 0xD0, 0x44, 0x06, 0xB0, 0xD2,
  0x07, 0xB0, 0xE7, 0x74, 0x04, 0xD0, 0x43, 0x0D, 0xB0, 0x72, 0x01, 0xC0, 0x77, 0x74, 0x04, 0xD8,
  0x14, 0x07, 0xC0, 0x13, 0x08, 0xC0, 0x37, 0x74, 0x04, 0xD0, 0x7C, 0x08, 0x40, 0x10, 0xEB, 0x0E,
  0x01, 0x77, 0x40, 0x4F, 0x90, 0xE0, 0x15, 0x04, 0xC0, 0xC0, 0x17, 0x74, 0x04, 0xF0, 0x47, 0x08,
  0xC0, 0xE0, 0x37, 0x74, 0x07, 0xD0, 0x87, 0x20, 0xAD, 0x07, 0x77, 0x20, 0x7D, 0x0A, 0x74, 0x0A,
  0xD0, 0xE0, 0x67, 0x50, 0x60, 0xDD, 0x0A, 0x76, 0x08, 0xF8, 0x2B, 0x63, 0x22, 0x83, 0x13, 0x6A,
  0xEE, 0x08, 0x77, 0x10, 0x40, 0xEF, 0xFE, 0x0E, 0x04, 0x77, 0x30, 0x10, 0x8F, 0xFC, 0x08, 0x01,
  0x77, 0x68, 0x11, 0x8D, 0xFD, 0x81, 0xD8, 0x17, 0x77, 0x48, 0x33, 0x7A, 0xCD, 0xA8, 0x3D, 0xCA,
  0x73, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_block_flipped() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_block_flipped_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_block 48x48, 4-bit Alpha,  RLE, 354 bytes.
static const uint8_t ic_sharp_48_content_block_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xF8, 0x2B, 0x63, 0x22, 0x83, 0x13, 0x6A, 0xEE, 0x09, 0x76, 0x0A, 0xD0, 0xD0, 0x67, 0x50,
  0x60, 0xDD, 0x0A, 0x74, 0x0A, 0xD0, 0x77, 0x72, 0x08, 0xD0, 0xA7, 0x20, 0x9C, 0x0D, 0x03, 0x77,
  0x40, 0x7D, 0x09, 0x70, 0x5C, 0x0C, 0x01, 0x77, 0x40, 0x5F, 0x05, 0x50, 0x10, 0xEB, 0x0D, 0x01,
  0x77, 0x40, 0x5F, 0x90, 0xE0, 0x14, 0x09, 0xC0, 0x37, 0x74, 0x05, 0xD0, 0x7C, 0x09, 0x30, 0x1C,
  0x07, 0x77, 0x40, 0x5D, 0x81, 0x50, 0x8C, 0x01, 0x20, 0x8B, 0x0D, 0x77, 0x40, 0x5D, 0x05, 0x30,
  0xDB, 0x08, 0x20, 0xDB, 0x06, 0x77, 0x30, 0x5D, 0x05, 0x40, 0x6B, 0x81, 0xD0, 0x3C, 0x77, 0x30,
  0x5D, 0x05, 0x60, 0xEB, 0x03, 0x07, 0xB0, 0xB7, 0x72, 0x05, 0xD0, 0x57, 0x0A, 0xB0, 0x70, 0xAB,
  0x06, 0x77, 0x10, 0x5D, 0x05, 0x71, 0x06, 0xB0, 0xA0, 0xCB, 0x03, 0x77, 0x05, 0xD0, 0x57, 0x20,
  0x3B, 0x0C, 0x0E, 0xB0, 0x27, 0x60, 0x5D, 0x05, 0x73, 0x01, 0xB0, 0xEC, 0x76, 0x05, 0xD0, 0x57,
  0x5F, 0x97, 0x50, 0x5D, 0x05, 0x76, 0xC0, 0xEB, 0x01, 0x73, 0x05, 0xD0, 0x57, 0x60, 0x2B, 0x0E,
  0x0C, 0xB0, 0x37, 0x20, 0x5D, 0x05, 0x77, 0x03, 0xB0, 0xC0, 0xAB, 0x06, 0x71, 0x05, 0xD0, 0x57,
  0x71, 0x06, 0xB0, 0xA0, 0x7B, 0x0A, 0x70, 0x5D, 0x05, 0x77, 0x20, 0xBB, 0x07, 0x03, 0xB0, 0xE6,
  0x05, 0xD0, 0x57, 0x73, 0xC8, 0x13, 0x0D, 0xB0, 0x64, 0x05, 0xD0, 0x57, 0x73, 0x06, 0xB0, 0xD2,
  0x08, 0xB0, 0xD3, 0x05, 0xD0, 0x57, 0x74, 0x0D, 0xB0, 0x82, 0x01, 0xC8, 0x18, 0x05, 0xD0, 0x57,
  0x74, 0x07, 0xC0, 0x13, 0x09, 0xC0, 0x7D, 0x05, 0x77, 0x40, 0x3C, 0x09, 0x40, 0x10, 0xEF, 0x90,
  0x57, 0x74, 0x01, 0x0D, 0xB0, 0xE0, 0x15, 0x05, 0xF0, 0x57, 0x74, 0x01, 0x0C, 0xC0, 0x57, 0x09,
  0xD0, 0x77, 0x74, 0x03, 0x0D, 0xC0, 0x97, 0x20, 0xAD, 0x08, 0x77, 0x20, 0x7D, 0x0A, 0x74, 0x0A,
  0xD0, 0xD0, 0x67, 0x50, 0x60, 0xDD, 0x0A, 0x76, 0x09, 0xE8, 0x3E, 0xA6, 0x31, 0x28, 0x22, 0x36,
  0xBF, 0x09, 0x77, 0x10, 0x50, 0xEF, 0xFE, 0x0E, 0x05, 0x77, 0x30, 0x10, 0x9F, 0xFC, 0x09, 0x01,
  0x77, 0x68, 0x11, 0x8D, 0xFD, 0x81, 0xD8, 0x17, 0x77, 0x48, 0x33, 0x7A, 0xCD, 0xA8, 0x3D, 0xCA,
  0x73, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_block() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_block_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_bolt 48x48, 4-bit Alpha,  RLE, 140 bytes.
static const uint8_t ic_sharp_48_content_bolt_data[] PROGMEM = {
  0x74, 0x81, 0x4F, 0xE7, 0x73, 0x81, 0xCF, 0xC7, 0x72, 0x06, 0xA0, 0x97, 0x71, 0x01, 0x0E, 0xA0,
  0x77, 0x71, 0x08, 0xB0, 0x57, 0x70, 0x2C, 0x03, 0x77, 0x0A, 0xC0, 0x17, 0x60, 0x4C, 0x0E, 0x77,
  0x0C, 0xC0, 0xC7, 0x60, 0x6D, 0x09, 0x76, 0x0E, 0xD0, 0x77, 0x50, 0x8E, 0x05, 0x74, 0x02, 0xF0,
  0x37, 0x40, 0xAF, 0x01, 0x73, 0x03, 0xFF, 0x90, 0xC3, 0x0C, 0xFF, 0x90, 0xA2, 0x05, 0xFF, 0xA0,
  0x22, 0x0D, 0xFF, 0x90, 0x82, 0x08, 0xFF, 0x98, 0x3E, 0x10, 0x1E, 0xFF, 0x90, 0x62, 0x0A, 0xFF,
  0x90, 0xC3, 0x0D, 0xFF, 0x90, 0x47, 0x30, 0x1F, 0x0A, 0x74, 0x03, 0xF0, 0x27, 0x40, 0x5E, 0x08,
  0x75, 0x07, 0xD0, 0xE0, 0x17, 0x50, 0x9D, 0x06, 0x76, 0x0C, 0xC0, 0xC7, 0x70, 0xEC, 0x04, 0x76,
  0x01, 0xC0, 0xA7, 0x70, 0x3C, 0x02, 0x77, 0x05, 0xB0, 0x87, 0x71, 0x07, 0xA0, 0xE0, 0x17, 0x71,
  0x09, 0xA0, 0x67, 0x72, 0x81, 0xCF, 0xC7, 0x73, 0x81, 0xEF, 0x47, 0x40,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_bolt() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(14, 6, 33, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_bolt_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_calculate 48x48, 4-bit Alpha,  RLE, 161 bytes.
static const uint8_t ic_sharp_48_content_calculate_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0x84, 0xDA, 0x10, 0x1E, 0xFF, 0xFF, 0xC8, 0x1E, 0x1A, 0xFF, 0xFF,
  0xE0, 0xA0, 0xDF, 0xFF, 0xFE, 0x0D, 0x80, 0x9B, 0x1F, 0x0A, 0x05, 0xC0, 0x50, 0xAF, 0xFF, 0xE0,
  0xA2, 0x05, 0xA0, 0x52, 0x0A, 0xFF, 0xFD, 0x07, 0x30, 0x05, 0x30, 0x7F, 0xD0, 0xB8, 0x05, 0x70,
  0xBC, 0x06, 0x60, 0x6F, 0xE0, 0x77, 0x20, 0x7D, 0x06, 0x40, 0x6F, 0xF0, 0x77, 0x20, 0x7D, 0x05,
  0x40, 0x5F, 0xF0, 0xB8, 0x05, 0x70, 0xBC, 0x05, 0x60, 0x5F, 0xFF, 0xE0, 0x63, 0x00, 0x63, 0x05,
  0xFF, 0xFD, 0x0B, 0x20, 0x6A, 0x06, 0x20, 0xBF, 0xFF, 0xE0, 0xB0, 0x7C, 0x07, 0x0B, 0x80, 0x9F,
  0x1F, 0x3F, 0xFF, 0xFD, 0x3F, 0x80, 0x67, 0xFF, 0xA3, 0xF7, 0x3F, 0xFA, 0x3F, 0x73, 0xFD, 0x74,
  0xB8, 0x06, 0x7F, 0xD7, 0x4F, 0xFF, 0xC7, 0x4B, 0x80, 0x67, 0xFF, 0xA3, 0xF7, 0x3F, 0xFA, 0x3F,
  0x73, 0xFF, 0xA3, 0xF8, 0x06, 0x7F, 0xFA, 0x38, 0x09, 0xB3, 0xF0, 0xDF, 0xFF, 0xFE, 0x0D, 0x0A,
  0xFF, 0xFF, 0xE8, 0x1A, 0x1E, 0xFF, 0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF, 0xF8, 0x1D, 0xA1,
  0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_calculate() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_calculate_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_change_circle 48x48, 4-bit Alpha,  RLE, 349 bytes.
static const uint8_t ic_sharp_48_content_change_circle_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xFF, 0xFB, 0x09, 0x76, 0x0A, 0xFF, 0xFD, 0x0A, 0x74, 0x0A, 0xFE, 0x07, 0xFF, 0x0A, 0x72,
  0x09, 0xFE, 0x05, 0x01, 0xFF, 0x90, 0x97, 0x05, 0xFE, 0x81, 0x50, 0x1F, 0xFA, 0x05, 0x50, 0x10,
  0xEF, 0xD0, 0x52, 0x01, 0xFF, 0xA0, 0xE0, 0x14, 0x09, 0xFD, 0x05, 0x48, 0x21, 0x25, 0xAF, 0xE0,
  0x93, 0x01, 0xFD, 0x07, 0x72, 0x02, 0x0A, 0xFD, 0x01, 0x20, 0x8F, 0xD0, 0xE0, 0x27, 0x30, 0x7F,
  0xC0, 0x82, 0x0D, 0xFE, 0x0E, 0x02, 0x28, 0x31, 0xEC, 0x71, 0x30, 0x7F, 0xB8, 0x1D, 0x03, 0xFB,
  0x0C, 0xC8, 0x2E, 0x20, 0x1B, 0x0E, 0x05, 0x30, 0xAF, 0xB0, 0x30, 0x7F, 0xB0, 0x10, 0x5C, 0x81,
  0xE2, 0x1D, 0x05, 0x20, 0x1F, 0xB0, 0x70, 0xAF, 0xA0, 0xA2, 0x06, 0xC0, 0xE0, 0x4D, 0x0E, 0x01,
  0x20, 0xAF, 0xA0, 0xA0, 0xCF, 0xA0, 0x52, 0x06, 0xD0, 0xEE, 0x07, 0x20, 0x5F, 0xA0, 0xC0, 0xEF,
  0xA0, 0x22, 0x0C, 0xFD, 0x0B, 0x20, 0x2F, 0xA0, 0xEF, 0xB3, 0x0E, 0xFD, 0x0E, 0x3F, 0xFE, 0x30,
  0xEF, 0xD0, 0xD3, 0xFB, 0x0E, 0xFA, 0x02, 0x20, 0xCF, 0xD0, 0xB2, 0x02, 0xFA, 0x0E, 0x0C, 0xFA,
  0x05, 0x20, 0x7E, 0x0E, 0xD0, 0x62, 0x05, 0xFA, 0x0C, 0x0A, 0xFA, 0x0A, 0x20, 0x10, 0xED, 0x04,
  0x0E, 0xC0, 0x62, 0x0A, 0xFA, 0x0A, 0x07, 0xFB, 0x01, 0x20, 0x5D, 0x81, 0x12, 0xEC, 0x05, 0x02,
  0xFB, 0x07, 0x03, 0xFB, 0x0A, 0x30, 0x50, 0xEB, 0x82, 0x10, 0x2E, 0xC0, 0xCF, 0xB8, 0x13, 0x0D,
  0xFB, 0x07, 0x38, 0x31, 0x7C, 0xD1, 0x20, 0x20, 0xEF, 0xE0, 0xD2, 0x08, 0xFC, 0x07, 0x73, 0x02,
  0x0E, 0xFD, 0x08, 0x20, 0x1F, 0xD0, 0xA0, 0x27, 0x20, 0x7F, 0xD0, 0x13, 0x09, 0xFE, 0x82, 0xA5,
  0x21, 0x40, 0x6F, 0xD0, 0x94, 0x01, 0x0E, 0xFF, 0xA0, 0x12, 0x06, 0xFD, 0x0E, 0x01, 0x50, 0x5F,
  0xFA, 0x81, 0x10, 0x6F, 0xE0, 0x57, 0x09, 0xFF, 0x90, 0x10, 0x6F, 0xE0, 0x97, 0x20, 0xAF, 0xF0,
  0x7F, 0xE0, 0xA7, 0x40, 0xAF, 0xFF, 0xD0, 0xA7, 0x60, 0x9F, 0xFF, 0xB0, 0x97, 0x71, 0x05, 0x0E,
  0xFF, 0xE0, 0xE0, 0x57, 0x73, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x76, 0x81, 0x18, 0xDF, 0xD8,
  0x1D, 0x81, 0x77, 0x74, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_change_circle() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_change_circle_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_clear 48x48, 4-bit Alpha,  RLE, 168 bytes.
static const uint8_t ic_sharp_48_content_clear_data[] PROGMEM = {
  0x20, 0xA0, 0x57, 0x76, 0x05, 0x0A, 0x30, 0xAA, 0x05, 0x77, 0x40, 0x5A, 0x81, 0xA0, 0xAC, 0x05,
  0x77, 0x20, 0x5C, 0x0A, 0x05, 0xD0, 0x57, 0x70, 0x5D, 0x81, 0x50, 0x5D, 0x05, 0x75, 0x05, 0xD0,
  0x53, 0x05, 0xD0, 0x57, 0x30, 0x5D, 0x05, 0x50, 0x5D, 0x05, 0x71, 0x05, 0xD0, 0x57, 0x05, 0xD0,
  0x56, 0x05, 0xD0, 0x57, 0x20, 0x5D, 0x05, 0x40, 0x5D, 0x05, 0x74, 0x05, 0xD0, 0x52, 0x05, 0xD0,
  0x57, 0x60, 0x5D, 0x00, 0x5D, 0x05, 0x77, 0x10, 0x5F, 0xB0, 0x57, 0x73, 0x05, 0xF9, 0x05, 0x77,
  0x50, 0x5E, 0x05, 0x77, 0x60, 0x5E, 0x05, 0x77, 0x50, 0x5F, 0x90, 0x57, 0x73, 0x05, 0xFB, 0x05,
  0x77, 0x10, 0x5D, 0x00, 0x5D, 0x05, 0x76, 0x05, 0xD0, 0x52, 0x05, 0xD0, 0x57, 0x40, 0x5D, 0x05,
  0x40, 0x5D, 0x05, 0x72, 0x05, 0xD0, 0x56, 0x05, 0xD0, 0x57, 0x05, 0xD0, 0x57, 0x10, 0x5D, 0x05,
  0x50, 0x5D, 0x05, 0x73, 0x05, 0xD0, 0x53, 0x05, 0xD0, 0x57, 0x50, 0x5D, 0x81, 0x50, 0x5D, 0x05,
  0x77, 0x05, 0xD0, 0x50, 0xAC, 0x05, 0x77, 0x20, 0x5C, 0x81, 0xA0, 0xAA, 0x05, 0x77, 0x40, 0x5A,
  0x0A, 0x30, 0xA0, 0x57, 0x76, 0x05, 0x0A, 0x20,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_clear() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 10, 37, 37), Box(0, 0, 47, 47),
      ic_sharp_48_content_clear_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_copy 48x48, 4-bit Alpha,  RLE, 194 bytes.
static const uint8_t ic_sharp_48_content_content_copy_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFB, 0x73, 0x01, 0x0E, 0xFF, 0xFD, 0x73, 0x0A, 0xFF, 0xFE, 0x73, 0x0D,
  0xFF, 0xFE, 0x73, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC5,
  0x81, 0x1A, 0xDF, 0xFF, 0x98, 0x1D, 0xA1, 0x1C, 0x40, 0x10, 0xEF, 0xFF, 0xD0, 0xE0, 0x1C, 0x40,
  0xAF, 0xFF, 0xF0, 0xAC, 0x40, 0xDF, 0xFF, 0xF0, 0xDC, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71,
  0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71,
  0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71,
  0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71,
  0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71,
  0xF9, 0x4C, 0x77, 0x71, 0xF9, 0x4C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71,
  0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71,
  0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x1C, 0x77, 0x71, 0xC7, 0x10, 0xDF, 0xFF, 0xF0, 0xD7, 0x10, 0xAF,
  0xFF, 0xF0, 0xA7, 0x10, 0x10, 0xEF, 0xFF, 0xD0, 0xE0, 0x17, 0x28, 0x11, 0xAD, 0xFF, 0xF9, 0x81,
  0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_copy() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 2, 41, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_copy_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_cut 48x48, 4-bit Alpha,  RLE, 329 bytes.
static const uint8_t ic_sharp_48_content_content_cut_data[] PROGMEM = {
  0x48, 0x62, 0x8C, 0xEE, 0xC8, 0x27, 0x77, 0x73, 0x09, 0xF9, 0x09, 0x77, 0x77, 0x10, 0xBF, 0xB0,
  0xB7, 0x75, 0x07, 0xE1, 0x09, 0xFD, 0x09, 0x77, 0x30, 0x7F, 0x02, 0xC8, 0x4D, 0x51, 0x15, 0xDC,
  0x02, 0x77, 0x10, 0x7F, 0x07, 0x08, 0xB0, 0xD0, 0x14, 0x01, 0x0D, 0xB0, 0x87, 0x70, 0x7F, 0x81,
  0x70, 0xCB, 0x05, 0x60, 0x5B, 0x0C, 0x76, 0x07, 0xF0, 0x72, 0x0E, 0xB0, 0x16, 0x01, 0xB0, 0xE7,
  0x50, 0x7F, 0x07, 0x30, 0xEB, 0x01, 0x60, 0x1B, 0x0E, 0x74, 0x07, 0xF0, 0x74, 0x0C, 0xB0, 0x56,
  0x05, 0xB0, 0xC7, 0x30, 0x7F, 0x07, 0x50, 0x8B, 0x0D, 0x01, 0x40, 0x10, 0xDB, 0x08, 0x72, 0x07,
  0xF0, 0x76, 0x02, 0xC8, 0x4D, 0x51, 0x15, 0xDC, 0x08, 0x71, 0x07, 0xF0, 0x77, 0x10, 0x9F, 0xF0,
  0x76, 0x07, 0xF0, 0x77, 0x30, 0xBF, 0xF0, 0x74, 0x07, 0xF0, 0x77, 0x50, 0x9F, 0xF0, 0x73, 0x07,
  0xE0, 0x77, 0x78, 0x62, 0x8C, 0xEE, 0xD8, 0x8F, 0x07, 0x30, 0x7C, 0x07, 0x77, 0x72, 0x07, 0xF0,
  0x73, 0x07, 0xA0, 0x77, 0x77, 0x40, 0x7F, 0x07, 0x30, 0x07, 0x77, 0x76, 0x07, 0xF0, 0x77, 0x77,
  0x74, 0x07, 0xB0, 0x03, 0xA0, 0x77, 0x77, 0x73, 0x07, 0xB0, 0x03, 0xB0, 0x77, 0x77, 0x71, 0x07,
  0xFB, 0x07, 0x77, 0x76, 0x07, 0xFD, 0x07, 0x77, 0x74, 0x07, 0xFF, 0x07, 0x77, 0x28, 0x62, 0x8C,
  0xEE, 0xD8, 0x8F, 0x00, 0x7F, 0x07, 0x77, 0x09, 0xFF, 0x07, 0x20, 0x7F, 0x07, 0x75, 0x0B, 0xFF,
  0x07, 0x40, 0x7F, 0x07, 0x73, 0x09, 0xFF, 0x07, 0x60, 0x7F, 0x07, 0x71, 0x02, 0xC8, 0x4D, 0x51,
  0x15, 0xDC, 0x08, 0x71, 0x07, 0xF0, 0x77, 0x08, 0xB0, 0xD0, 0x14, 0x01, 0x0D, 0xB0, 0x87, 0x20,
  0x7F, 0x07, 0x60, 0xCB, 0x05, 0x60, 0x5B, 0x0C, 0x73, 0x07, 0xF0, 0x75, 0x0E, 0xB0, 0x16, 0x01,
  0xB0, 0xE7, 0x40, 0x7F, 0x07, 0x40, 0xEB, 0x01, 0x60, 0x1B, 0x0E, 0x75, 0x07, 0xF0, 0x73, 0x0C,
  0xB0, 0x56, 0x05, 0xB0, 0xC7, 0x60, 0x7F, 0x07, 0x20, 0x8B, 0x0D, 0x01, 0x40, 0x10, 0xDB, 0x08,
  0x77, 0x07, 0xF8, 0x17, 0x02, 0xC8, 0x4D, 0x51, 0x15, 0xDC, 0x02, 0x77, 0x10, 0x7F, 0x81, 0x70,
  0x9F, 0xD0, 0x97, 0x73, 0x07, 0xF2, 0x0B, 0xFB, 0x0B, 0x77, 0x50, 0x7E, 0x30, 0x9F, 0x90, 0x97,
  0x77, 0x73, 0x86, 0x28, 0xCE, 0xEC, 0x82, 0x77, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_cut() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_cut_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_paste_go 48x48, 4-bit Alpha,  RLE, 210 bytes.
static const uint8_t ic_sharp_48_content_content_paste_go_data[] PROGMEM = {
  0x77, 0x18, 0x45, 0xBE, 0xEB, 0x57, 0x77, 0x72, 0x01, 0x0C, 0xE0, 0xC0, 0x17, 0x77, 0x70, 0xCF,
  0x90, 0xC7, 0x77, 0x60, 0x5F, 0xB0, 0x57, 0x71, 0x81, 0x1A, 0xDF, 0xD8, 0x2B, 0x11, 0xBF, 0xD8,
  0x1D, 0xA1, 0x30, 0x10, 0xEF, 0xF0, 0x12, 0x01, 0xFF, 0x0E, 0x01, 0x20, 0xAF, 0xF9, 0x01, 0x20,
  0x1F, 0xF9, 0x0A, 0x20, 0xDF, 0xF9, 0x82, 0xB1, 0x1B, 0xFF, 0x90, 0xD2, 0xC4, 0xFF, 0xE4, 0xC2,
  0xC4, 0xFF, 0xE4, 0xC2, 0xC4, 0xFF, 0xE4, 0xC2, 0xC4, 0xFF, 0xE4, 0xC2, 0xC4, 0xFF, 0xE4, 0xC2,
  0xC4, 0xFF, 0xE4, 0xC2, 0xC7, 0x77, 0x7C, 0x2C, 0x77, 0x77, 0xC2, 0xC7, 0x77, 0x7C, 0x2C, 0x77,
  0x77, 0xC2, 0xC7, 0x77, 0x7C, 0x2C, 0x77, 0x77, 0xC2, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7,
  0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x40, 0x70, 0x87, 0xC7, 0x77, 0x30, 0x7A, 0x08, 0x6C,
  0x77, 0x72, 0x07, 0xC0, 0x85, 0xC7, 0x77, 0x20, 0x30, 0xEC, 0x08, 0x4C, 0x77, 0x73, 0x03, 0x0E,
  0xC0, 0x83, 0xC7, 0x77, 0x40, 0x30, 0xEC, 0x08, 0x2C, 0x77, 0xFF, 0xC0, 0x81, 0xC7, 0x7F, 0xFD,
  0x08, 0xC7, 0x7F, 0xFD, 0x07, 0xC7, 0x7F, 0xFC, 0x07, 0x1C, 0x77, 0x74, 0x03, 0x0E, 0xC0, 0x72,
  0xC7, 0x77, 0x30, 0x30, 0xEC, 0x07, 0x30, 0xDF, 0xE7, 0x60, 0x30, 0xEC, 0x07, 0x40, 0xAF, 0xE7,
  0x60, 0x7C, 0x07, 0x50, 0x10, 0xEF, 0xD7, 0x70, 0x7A, 0x07, 0x78, 0x11, 0xAD, 0xFB, 0x77, 0x10,
  0x07, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_paste_go() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 2, 43, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_paste_go_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_paste_off 48x48, 4-bit Alpha,  RLE, 303 bytes.
static const uint8_t ic_sharp_48_content_content_paste_off_data[] PROGMEM = {
  0x77, 0x48, 0x45, 0xBE, 0xEB, 0x57, 0x77, 0x74, 0x01, 0x0C, 0xE0, 0xC0, 0x17, 0x77, 0x72, 0x0C,
  0xF9, 0x0C, 0x77, 0x20, 0x27, 0x50, 0x5F, 0xB0, 0x57, 0x78, 0x14, 0xF7, 0x50, 0xCF, 0xA8, 0x2B,
  0x11, 0xBF, 0xD8, 0x1D, 0xA1, 0x20, 0x4B, 0x07, 0x50, 0xCF, 0x90, 0x12, 0x01, 0xFF, 0x82, 0xE1,
  0x0E, 0xC0, 0x75, 0x0C, 0xF0, 0x12, 0x01, 0xFF, 0x98, 0x2A, 0x03, 0xEC, 0x07, 0x50, 0xCE, 0x82,
  0xB1, 0x1B, 0xFF, 0x90, 0xD2, 0x03, 0x0E, 0xC0, 0x75, 0x0C, 0xFF, 0xB4, 0xC3, 0x03, 0xD0, 0x75,
  0x0C, 0xFF, 0xA4, 0xC4, 0xE0, 0x75, 0x0C, 0xFF, 0x94, 0xC4, 0xF0, 0x75, 0x0C, 0xFF, 0x4C, 0x4F,
  0x90, 0x75, 0x0C, 0xFE, 0x4C, 0x4C, 0x0E, 0xC0, 0x75, 0x0C, 0xFD, 0x4C, 0x4C, 0x03, 0x0E, 0xC0,
  0x77, 0x77, 0xC4, 0xC1, 0x03, 0x0E, 0xC0, 0x77, 0x76, 0xC4, 0xC2, 0x03, 0x0E, 0xC0, 0x77, 0x75,
  0xC4, 0xC3, 0x03, 0x0E, 0xC0, 0x77, 0x74, 0xC4, 0xC4, 0x03, 0x0E, 0xC0, 0x77, 0x73, 0xC4, 0xC5,
  0x03, 0x0E, 0xC0, 0x77, 0x72, 0xC4, 0xC6, 0x03, 0x0E, 0xC0, 0x77, 0x71, 0xC4, 0xC7, 0x03, 0x0E,
  0xC0, 0x77, 0x7C, 0x4C, 0x71, 0x03, 0x0E, 0xC0, 0x77, 0x6C, 0x4C, 0x72, 0x03, 0x0E, 0xC0, 0x77,
  0x5C, 0x4C, 0x73, 0x03, 0x0E, 0xC0, 0x77, 0x4C, 0x4C, 0x74, 0x03, 0x0E, 0xC0, 0x77, 0x3C, 0x4C,
  0x75, 0x03, 0x0E, 0xC0, 0x77, 0x2C, 0x4C, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x1C, 0x4C, 0x77, 0x03,
  0x0E, 0xC0, 0x77, 0xC4, 0xC7, 0x71, 0x03, 0x0E, 0xC0, 0x76, 0xC4, 0xC7, 0x72, 0x03, 0x0E, 0xC0,
  0x75, 0x0C, 0xB4, 0xC7, 0x73, 0x03, 0x0E, 0xC0, 0x75, 0x0C, 0xA4, 0xC7, 0x74, 0x03, 0x0E, 0xC0,
  0x75, 0x0C, 0x94, 0xC7, 0x75, 0x03, 0x0E, 0xC0, 0x75, 0x0C, 0x4C, 0x77, 0x60, 0x30, 0xEC, 0x07,
  0x72, 0xC7, 0x77, 0x03, 0x0E, 0xC0, 0x77, 0x10, 0xDF, 0xFF, 0xFB, 0x07, 0x70, 0xAF, 0xFF, 0xFC,
  0x07, 0x60, 0x10, 0xEF, 0xFF, 0xFC, 0x07, 0x68, 0x11, 0xAD, 0xFF, 0xFF, 0xB0, 0x77, 0x77, 0x76,
  0x03, 0x0E, 0xC0, 0x27, 0x77, 0x76, 0x03, 0x0E, 0xA0, 0x48, 0x0C, 0x00, 0x81, 0x3E, 0x42,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_paste_off() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(3, 2, 42, 44), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_paste_off_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_paste 48x48, 4-bit Alpha,  RLE, 177 bytes.
static const uint8_t ic_sharp_48_content_content_paste_data[] PROGMEM = {
  0x77, 0x18, 0x45, 0xBE, 0xEB, 0x57, 0x77, 0x70, 0x10, 0xCE, 0x0C, 0x01, 0x77, 0x75, 0x0C, 0xF9,
  0x0C, 0x77, 0x74, 0x05, 0xFB, 0x05, 0x76, 0x81, 0x1A, 0xDF, 0xD8, 0x2B, 0x11, 0xBF, 0xD8, 0x4D,
  0xA1, 0x01, 0xEF, 0xF0, 0x12, 0x01, 0xFF, 0x81, 0xE1, 0xAF, 0xF9, 0x01, 0x20, 0x1F, 0xF9, 0x0A,
  0x0D, 0xFF, 0x98, 0x2B, 0x11, 0xBF, 0xF9, 0x0D, 0xC4, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94,
  0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x97, 0x77, 0x7F,
  0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97,
  0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77,
  0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F,
  0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97,
  0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7C, 0x0D, 0xFF, 0xFF, 0xE0, 0xD0,
  0xAF, 0xFF, 0xFE, 0x81, 0xA1, 0xEF, 0xFF, 0xFC, 0x84, 0xE1, 0x01, 0xAD, 0xFF, 0xFF, 0x81, 0xDA,
  0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_paste() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 0, 41, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_paste_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_content_paste_search 48x48, 4-bit Alpha,  RLE, 277 bytes.
static const uint8_t ic_sharp_48_content_content_paste_search_data[] PROGMEM = {
  0x77, 0x18, 0x45, 0xBE, 0xEB, 0x57, 0x77, 0x74, 0x01, 0x0C, 0xE0, 0xC0, 0x17, 0x77, 0x72, 0x0C,
  0xF9, 0x0C, 0x77, 0x77, 0x10, 0x5F, 0xB0, 0x57, 0x73, 0x81, 0x1A, 0xDF, 0xD8, 0x2B, 0x11, 0xBF,
  0xD8, 0x1D, 0xA1, 0x50, 0x10, 0xEF, 0xF0, 0x12, 0x01, 0xFF, 0x0E, 0x01, 0x40, 0xAF, 0xF9, 0x01,
  0x20, 0x1F, 0xF9, 0x0A, 0x40, 0xDF, 0xF9, 0x82, 0xB1, 0x1B, 0xFF, 0x90, 0xD4, 0xC4, 0xFF, 0xE4,
  0xC4, 0xC4, 0xFF, 0xE4, 0xC4, 0xC4, 0xFF, 0xE4, 0xC4, 0xC4, 0xFF, 0xE4, 0xC4, 0xC4, 0xFF, 0xE4,
  0xC4, 0xC4, 0xFF, 0xE4, 0xC4, 0xC7, 0x77, 0x7C, 0x4C, 0x77, 0x77, 0xC4, 0xC7, 0x77, 0x7C, 0x4C,
  0x77, 0x77, 0xC4, 0xC8, 0x0C, 0x00, 0xC8, 0x0C, 0x00, 0xC8, 0x0C, 0x00, 0xC8, 0x0C, 0x00, 0xC7,
  0x75, 0x86, 0x49, 0xDE, 0xED, 0x94, 0x72, 0xC7, 0x73, 0x02, 0x0B, 0xF9, 0x0B, 0x02, 0x7C, 0x77,
  0x20, 0x30, 0xEF, 0xB0, 0xE0, 0x36, 0xC7, 0x71, 0x02, 0x0E, 0xFD, 0x0E, 0x02, 0x5C, 0x77, 0x10,
  0xBC, 0x0A, 0x03, 0x20, 0x30, 0xAC, 0x0B, 0x5C, 0x77, 0x04, 0xC0, 0x66, 0x06, 0xC0, 0x44, 0xC7,
  0x70, 0x9B, 0x0A, 0x71, 0x0A, 0xB0, 0x94, 0xC7, 0x70, 0xDB, 0x03, 0x71, 0x03, 0xB0, 0xD4, 0xC7,
  0x70, 0xEB, 0x73, 0xB0, 0xE4, 0xC7, 0x70, 0xEB, 0x73, 0xB0, 0xE4, 0xC7, 0x70, 0xDB, 0x03, 0x71,
  0x03, 0xB0, 0xD4, 0xC7, 0x70, 0x9B, 0x0A, 0x71, 0x0A, 0xB0, 0x94, 0xC7, 0x70, 0x4C, 0x06, 0x60,
  0x6C, 0x02, 0x4C, 0x77, 0x10, 0xBC, 0x0A, 0x03, 0x20, 0x30, 0xAC, 0x0B, 0x50, 0xDF, 0xE5, 0x02,
  0x0E, 0xFF, 0x04, 0x40, 0xAF, 0xE6, 0x03, 0x0E, 0xFF, 0x04, 0x30, 0x10, 0xEF, 0xD7, 0x02, 0x0B,
  0xF9, 0x0B, 0xD0, 0x43, 0x81, 0x1A, 0xDF, 0xB7, 0x28, 0x90, 0x49, 0xDE, 0xFC, 0x92, 0x04, 0xD0,
  0x47, 0x77, 0x76, 0x04, 0xD0, 0x47, 0x77, 0x76, 0x04, 0xC0, 0xA7, 0x77, 0x77, 0x04, 0xA0, 0xA8,
  0x0C, 0x10, 0x04, 0x0A, 0x20,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_content_paste_search() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 2, 45, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_content_paste_search_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_copy_all 48x48, 4-bit Alpha,  RLE, 174 bytes.
static const uint8_t ic_sharp_48_content_copy_all_data[] PROGMEM = {
  0x72, 0x81, 0x1A, 0xDF, 0xFC, 0x81, 0xDA, 0x17, 0x20, 0x10, 0xEF, 0xFF, 0x90, 0xE0, 0x17, 0x10,
  0xAF, 0xFF, 0xB0, 0xA7, 0x10, 0xDF, 0xFF, 0xB0, 0xD7, 0x1C, 0x77, 0x4C, 0x71, 0xC7, 0x74, 0xC7,
  0x1C, 0x77, 0x4C, 0x71, 0xC7, 0x74, 0xC1, 0x81, 0x1A, 0xD4, 0xC7, 0x74, 0xC0, 0x10, 0xEA, 0x4C,
  0x77, 0x4C, 0x0A, 0xB4, 0xC7, 0x74, 0xC0, 0xDB, 0x4C, 0x77, 0x4C, 0x71, 0xC7, 0x74, 0xC7, 0x1C,
  0x77, 0x4C, 0x71, 0xC7, 0x74, 0xF9, 0x4C, 0x77, 0x4F, 0x94, 0xC7, 0x74, 0xF9, 0x4C, 0x77, 0x4F,
  0x94, 0xC7, 0x74, 0xC7, 0x1C, 0x77, 0x4C, 0x71, 0xC7, 0x74, 0xC7, 0x1C, 0x77, 0x4F, 0x94, 0xC7,
  0x74, 0xF9, 0x4C, 0x77, 0x4F, 0x94, 0xC7, 0x74, 0xF9, 0x4C, 0x77, 0x4C, 0x71, 0xC7, 0x74, 0xC7,
  0x1C, 0x77, 0x4C, 0x71, 0x0D, 0xFF, 0xFB, 0x0D, 0xC4, 0x0A, 0xFF, 0xFB, 0x0A, 0xC4, 0x01, 0x0E,
  0xFF, 0xF9, 0x0E, 0x01, 0xC5, 0x81, 0x1A, 0xDF, 0xFC, 0x81, 0xDA, 0x11, 0xC8, 0x0A, 0x80, 0x00,
  0xDB, 0x3C, 0x3C, 0x3B, 0x0D, 0x72, 0x0A, 0xB3, 0xC3, 0xC3, 0xB0, 0xA7, 0x20, 0x10, 0xEA, 0x3C,
  0x3C, 0x3A, 0x0E, 0x01, 0x73, 0x81, 0x1A, 0xD3, 0xC3, 0xC3, 0x81, 0xDA, 0x17, 0x30,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_copy_all() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 4, 39, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_copy_all_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_create 48x48, 4-bit Alpha,  RLE, 231 bytes.
static const uint8_t ic_sharp_48_content_create_data[] PROGMEM = {
  0x77, 0x76, 0x82, 0x1B, 0xE8, 0x77, 0x77, 0x30, 0x10, 0xDB, 0x0A, 0x77, 0x77, 0x10, 0x10, 0xDD,
  0x0A, 0x77, 0x76, 0x01, 0x0D, 0xF0, 0xA7, 0x77, 0x50, 0x6F, 0xA0, 0xA7, 0x77, 0x50, 0x7F, 0xA0,
  0x87, 0x77, 0x01, 0x04, 0x30, 0x7F, 0x90, 0xE7, 0x76, 0x82, 0x1D, 0xE4, 0x30, 0x7F, 0x0B, 0x77,
  0x50, 0x10, 0xDA, 0x0E, 0x04, 0x30, 0x7D, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDC, 0x0E, 0x04, 0x30,
  0x7B, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDE, 0x0E, 0x04, 0x38, 0x27, 0xFD, 0x17, 0x74, 0x01, 0x0D,
  0xF9, 0x0E, 0x04, 0x30, 0x60, 0x17, 0x74, 0x01, 0x0D, 0xFB, 0x0E, 0x04, 0x77, 0x70, 0x10, 0xDF,
  0xD0, 0xE0, 0x47, 0x75, 0x01, 0x0D, 0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0, 0x17,
  0x74, 0x01, 0x0D, 0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0, 0x17, 0x74, 0x01, 0x0D,
  0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0, 0x17, 0x74, 0x01, 0x0D, 0xFE, 0x0D, 0x01,
  0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0, 0x17, 0x74, 0x01, 0x0D, 0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10,
  0xDF, 0xE0, 0xD0, 0x17, 0x74, 0x01, 0x0D, 0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0,
  0x17, 0x74, 0x01, 0x0D, 0xFE, 0x0D, 0x01, 0x77, 0x40, 0x10, 0xDF, 0xE0, 0xD0, 0x17, 0x75, 0x0D,
  0xFE, 0x0D, 0x01, 0x77, 0x6F, 0xE0, 0xD0, 0x17, 0x77, 0xFD, 0x0D, 0x01, 0x77, 0x71, 0xFC, 0x0D,
  0x01, 0x77, 0x72, 0xFB, 0x0D, 0x01, 0x77, 0x73, 0xFA, 0x0D, 0x01, 0x77, 0x74, 0xF9, 0x0D, 0x01,
  0x77, 0x75, 0xF0, 0xD0, 0x17, 0x77, 0x60,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_create() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_create_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_delete_sweep 48x48, 4-bit Alpha,  RLE, 119 bytes.
static const uint8_t ic_sharp_48_content_delete_sweep_data[] PROGMEM = {
  0x70, 0x7F, 0x90, 0x77, 0x77, 0x71, 0x07, 0xFB, 0x07, 0x77, 0x71, 0xFF, 0xFB, 0x77, 0x2F, 0xFF,
  0xB7, 0x72, 0xFF, 0xFB, 0x77, 0x2F, 0xFF, 0xB8, 0x09, 0xB6, 0x0F, 0xFE, 0x4F, 0xF2, 0xFF, 0xE4,
  0xFF, 0x2F, 0xFE, 0x4F, 0xF2, 0xFF, 0xE4, 0xFF, 0x2F, 0xFE, 0x77, 0x6F, 0xFE, 0x77, 0x6F, 0xFE,
  0x77, 0x6F, 0xFE, 0x77, 0x6F, 0xFE, 0x4F, 0xD4, 0xFF, 0xE4, 0xFD, 0x4F, 0xFE, 0x4F, 0xD4, 0xFF,
  0xE4, 0xFD, 0x4F, 0xFE, 0x77, 0x6F, 0xFE, 0x77, 0x6F, 0xFE, 0x77, 0x6F, 0xFE, 0x77, 0x6F, 0xFE,
  0x4F, 0x97, 0x1F, 0xFE, 0x4F, 0x97, 0x1F, 0xFE, 0x4F, 0x97, 0x1F, 0xFE, 0x4F, 0x97, 0x10, 0xDF,
  0xFC, 0x0D, 0x77, 0x60, 0xAF, 0xFC, 0x0A, 0x77, 0x60, 0x10, 0xEF, 0xFA, 0x0E, 0x01, 0x77, 0x78,
  0x11, 0xAD, 0xFD, 0x81, 0xDA, 0x17, 0x75,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_delete_sweep() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 8, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_delete_sweep_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_deselect 48x48, 4-bit Alpha,  RLE, 269 bytes.
static const uint8_t ic_sharp_48_content_deselect_data[] PROGMEM = {
  0x20, 0x28, 0x0C, 0x20, 0x81, 0x4F, 0x77, 0xC4, 0xC4, 0xC4, 0x81, 0xDA, 0x12, 0x04, 0xB0, 0x76,
  0xC4, 0xC4, 0xC4, 0xA8, 0x2E, 0x10, 0xEC, 0x07, 0x50, 0xCB, 0x4C, 0x4C, 0x4B, 0x82, 0xA0, 0x3E,
  0xC0, 0x75, 0x0C, 0xA4, 0xC4, 0xC4, 0xB0, 0xD2, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E,
  0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x74,
  0xF9, 0x07, 0x50, 0xCF, 0xE4, 0xC4, 0xC0, 0xEC, 0x07, 0x50, 0xCF, 0xD4, 0xC4, 0xC0, 0x30, 0xEC,
  0x07, 0x50, 0xCF, 0xC4, 0xC4, 0xC1, 0x03, 0x0E, 0xC0, 0x75, 0x0C, 0xFB, 0x4C, 0x73, 0x03, 0x0E,
  0xC0, 0x77, 0x4C, 0x77, 0x50, 0x3D, 0x07, 0x73, 0xC7, 0x76, 0xE0, 0x77, 0x2C, 0x77, 0x6F, 0x07,
  0x71, 0xC7, 0x5C, 0x4F, 0x90, 0x77, 0xC4, 0xC4, 0xC4, 0xC0, 0xEC, 0x07, 0x6C, 0x4C, 0x4C, 0x4C,
  0x03, 0x0E, 0xC0, 0x75, 0x0C, 0xB4, 0xC4, 0xC4, 0xC1, 0x03, 0x0E, 0xC0, 0x75, 0x0C, 0xA4, 0xC7,
  0x5C, 0x20, 0x30, 0xEC, 0x07, 0x50, 0xC9, 0x77, 0x6C, 0x30, 0x30, 0xEC, 0x07, 0x50, 0xC7, 0x76,
  0xC4, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x4C, 0x50, 0x30, 0xEC, 0x07, 0x77, 0x2C, 0x4F, 0xFA, 0x07,
  0x7C, 0x4C, 0x4F, 0xFB, 0x07, 0x6C, 0x4C, 0x4F, 0xFC, 0x07, 0x50, 0xCB, 0x4C, 0x4F, 0xFD, 0x07,
  0x50, 0xCA, 0x77, 0x75, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76,
  0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x10, 0xDB, 0x4C, 0x4C, 0x4F, 0x90,
  0x77, 0x0A, 0xB4, 0xC4, 0xC4, 0xC0, 0xEC, 0x07, 0x60, 0x10, 0xEA, 0x4C, 0x4C, 0x4C, 0x03, 0x0E,
  0xC0, 0x76, 0x81, 0x1A, 0xD4, 0xC4, 0xC4, 0xC1, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E,
  0xC0, 0x27, 0x77, 0x76, 0x03, 0x0E, 0xA0, 0x48, 0x0C, 0x00, 0x81, 0x3E, 0x42,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_deselect() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(3, 5, 42, 44), Box(0, 0, 47, 47),
      ic_sharp_48_content_deselect_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_drafts 48x48, 4-bit Alpha,  RLE, 216 bytes.
static const uint8_t ic_sharp_48_content_drafts_data[] PROGMEM = {
  0x77, 0x48, 0x22, 0xAA, 0x27, 0x77, 0x77, 0x08, 0xC0, 0x87, 0x77, 0x74, 0x05, 0x0D, 0xE0, 0xD0,
  0x57, 0x77, 0x70, 0x30, 0xBF, 0xB0, 0xB0, 0x37, 0x77, 0x30, 0x10, 0x9D, 0x82, 0xD4, 0x4D, 0xD0,
  0x90, 0x17, 0x77, 0x06, 0x0E, 0xC0, 0xE0, 0x74, 0x07, 0x0E, 0xC0, 0xE0, 0x67, 0x74, 0x04, 0x0C,
  0xD0, 0x90, 0x16, 0x01, 0x09, 0xD0, 0xC0, 0x47, 0x70, 0x10, 0xAD, 0x0C, 0x03, 0x73, 0x03, 0x0C,
  0xD0, 0xA0, 0x17, 0x40, 0x7D, 0x0E, 0x06, 0x77, 0x06, 0x0E, 0xD0, 0x77, 0x10, 0x50, 0xDD, 0x08,
  0x01, 0x77, 0x20, 0x10, 0x8D, 0x0D, 0x05, 0x40, 0x20, 0xBD, 0x0B, 0x02, 0x77, 0x60, 0x20, 0xBD,
  0x83, 0xB2, 0x02, 0xEC, 0x0D, 0x05, 0x77, 0x73, 0x05, 0x0D, 0xC8, 0x1E, 0x2A, 0xB0, 0xE0, 0x77,
  0x77, 0x70, 0x70, 0xEB, 0x0A, 0x0E, 0xA0, 0xC0, 0x17, 0x77, 0x72, 0x01, 0x0C, 0xA0, 0xEC, 0x0A,
  0x01, 0x77, 0x77, 0x01, 0x0A, 0xFA, 0x0E, 0x06, 0x77, 0x75, 0x06, 0x0E, 0xFD, 0x0C, 0x03, 0x77,
  0x71, 0x03, 0x0C, 0xFF, 0xA0, 0x87, 0x76, 0x08, 0xFF, 0xD0, 0xD0, 0x47, 0x72, 0x04, 0x0D, 0xFF,
  0xF9, 0x0A, 0x01, 0x75, 0x01, 0x0A, 0xFF, 0xFC, 0x0E, 0x06, 0x73, 0x06, 0x0E, 0xFF, 0xFF, 0x0C,
  0x03, 0x60, 0x30, 0xCF, 0xFF, 0xFC, 0x08, 0x40, 0x8F, 0xFF, 0xFF, 0x82, 0xD4, 0x4D, 0x80, 0xEB,
  0x6F, 0x0D, 0x80, 0xC2, 0xF0, 0xD0, 0xA8, 0x0C, 0x2F, 0x81, 0xA1, 0xE8, 0x0C, 0x0F, 0x84, 0xE1,
  0x01, 0xAD, 0xFF, 0xFF, 0xC8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_drafts() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 2, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_drafts_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_dynamic_feed 48x48, 4-bit Alpha,  RLE, 169 bytes.
static const uint8_t ic_sharp_48_content_dynamic_feed_data[] PROGMEM = {
  0x77, 0x38, 0x11, 0xAD, 0xFF, 0xA8, 0x1D, 0xA1, 0x77, 0x30, 0x10, 0xEF, 0xFE, 0x0E, 0x01, 0x77,
  0x20, 0xAF, 0xFF, 0x90, 0xA7, 0x72, 0x0D, 0xFF, 0xF9, 0x0D, 0x77, 0x2F, 0xFF, 0xB7, 0x72, 0xFF,
  0xFB, 0x77, 0x2F, 0xFF, 0xB7, 0x72, 0xFF, 0xFB, 0x77, 0x2C, 0x77, 0x2C, 0x77, 0x2C, 0x77, 0x2C,
  0x71, 0xC4, 0xC7, 0x72, 0xC7, 0x1C, 0x4C, 0x77, 0x2C, 0x71, 0xC4, 0xC7, 0x72, 0xC7, 0x1C, 0x4C,
  0x77, 0x2C, 0x71, 0xC4, 0xC7, 0x72, 0xC7, 0x1C, 0x4C, 0x77, 0x2C, 0x71, 0xC4, 0x0D, 0xFF, 0xF9,
  0x0D, 0x71, 0xC4, 0x0A, 0xFF, 0xF9, 0x0A, 0xC4, 0xC4, 0x01, 0x0E, 0xFF, 0xE0, 0xE0, 0x1C, 0x4C,
  0x58, 0x11, 0xAD, 0xFF, 0xA8, 0x1D, 0xA1, 0x1C, 0x4C, 0x77, 0x77, 0xC4, 0xC7, 0x77, 0x7C, 0x4C,
  0x77, 0x77, 0xC4, 0xC7, 0x77, 0x7C, 0x40, 0xDF, 0xFF, 0x73, 0xC4, 0x0A, 0xFF, 0xF7, 0x3C, 0x40,
  0x10, 0xEF, 0xFE, 0x73, 0xC5, 0x81, 0x1A, 0xDF, 0xFC, 0x73, 0xC8, 0x0C, 0x00, 0xC8, 0x0C, 0x00,
  0xC8, 0x0C, 0x00, 0xC8, 0x0C, 0x00, 0x0D, 0xFF, 0xF7, 0x74, 0x0A, 0xFF, 0xF7, 0x74, 0x01, 0x0E,
  0xFF, 0xE7, 0x75, 0x81, 0x1A, 0xDF, 0xFC, 0x77, 0x40,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_dynamic_feed() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 6, 43, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_dynamic_feed_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_file_copy 48x48, 4-bit Alpha,  RLE, 198 bytes.
static const uint8_t ic_sharp_48_content_file_copy_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFB, 0x73, 0x01, 0x0E, 0xFF, 0xFD, 0x73, 0x0A, 0xFF, 0xFE, 0x73, 0x0D,
  0xFF, 0xFE, 0x73, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC7, 0x77, 0x76, 0xC5,
  0x81, 0x1A, 0xDF, 0xF0, 0x77, 0x4C, 0x40, 0x10, 0xEF, 0xFB, 0x07, 0x73, 0xC4, 0x09, 0xFF, 0xD0,
  0x77, 0x2C, 0x40, 0xDF, 0xF9, 0x07, 0xC0, 0x77, 0x1C, 0x4F, 0xFA, 0x10, 0x7C, 0x07, 0x7C, 0x4F,
  0xFA, 0x20, 0x7C, 0x07, 0x6C, 0x4F, 0xFA, 0x30, 0x7C, 0x07, 0x5C, 0x4F, 0xFA, 0x40, 0x7C, 0x07,
  0x4C, 0x4F, 0xFA, 0x50, 0x7C, 0x07, 0x3C, 0x4F, 0xFA, 0x60, 0x7C, 0x07, 0x2C, 0x4F, 0xFA, 0x70,
  0x7C, 0x07, 0x1C, 0x4F, 0xFA, 0x71, 0x07, 0xC0, 0x7C, 0x4F, 0xFA, 0x72, 0x07, 0xF9, 0x4F, 0xFA,
  0x73, 0x07, 0xF4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF,
  0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF, 0xE4, 0xFF, 0xFF,
  0xA7, 0x1F, 0xFF, 0xFA, 0x71, 0xFF, 0xFF, 0xA7, 0x1F, 0xFF, 0xFA, 0x71, 0xFF, 0xFF, 0xA7, 0x1F,
  0xFF, 0xFA, 0x71, 0xFF, 0xFF, 0xA7, 0x1F, 0xFF, 0xFA, 0x71, 0xFF, 0xFF, 0xA7, 0x10, 0xDF, 0xFF,
  0xF0, 0xD7, 0x10, 0xAF, 0xFF, 0xF0, 0xA7, 0x10, 0x10, 0xEF, 0xFF, 0xD0, 0xE0, 0x17, 0x28, 0x11,
  0xAE, 0xFF, 0xF9, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_file_copy() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 2, 41, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_file_copy_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_filter_list_off 48x48, 4-bit Alpha,  RLE, 229 bytes.
static const uint8_t ic_sharp_48_content_filter_list_off_data[] PROGMEM = {
  0x20, 0x28, 0x0C, 0x20, 0x81, 0x4F, 0x78, 0x0C, 0x00, 0x04, 0xB0, 0x77, 0x77, 0x77, 0x0E, 0xC0,
  0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03,
  0x0E, 0xC0, 0x77, 0x77, 0x76, 0xE0, 0x75, 0x0C, 0xFF, 0xFA, 0x4F, 0x07, 0x50, 0xCF, 0xFF, 0x94,
  0xF9, 0x07, 0x50, 0xCF, 0xFF, 0x4F, 0xA0, 0x75, 0x0C, 0xFF, 0xE7, 0x10, 0x30, 0xEC, 0x07, 0x77,
  0x77, 0x60, 0x30, 0xEC, 0x07, 0x77, 0x77, 0x60, 0x30, 0xEC, 0x07, 0x77, 0x77, 0x60, 0x30, 0xEC,
  0x07, 0x77, 0x77, 0x60, 0x30, 0xEC, 0x07, 0x77, 0x77, 0x60, 0x30, 0xEC, 0x07, 0x77, 0x77, 0x2F,
  0xB0, 0x75, 0x0C, 0xF7, 0x72, 0xFC, 0x07, 0x50, 0xCE, 0x77, 0x2F, 0xD0, 0x75, 0x0C, 0xD7, 0x72,
  0xFE, 0x07, 0x50, 0xCC, 0x77, 0x73, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77,
  0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E,
  0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x7F, 0xD0, 0x77, 0x77, 0x6F, 0x90, 0xEC,
  0x07, 0x77, 0x75, 0xF9, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x4F, 0x91, 0x03, 0x0E, 0xC0, 0x77, 0x77,
  0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0,
  0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03,
  0x0E, 0xC0, 0x77, 0x77, 0x76, 0x03, 0x0E, 0xB0, 0xE0, 0x27, 0x77, 0x76, 0x83, 0x3E, 0xFE, 0x48,
  0x0C, 0x00, 0x81, 0x3E, 0x42,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_filter_list_off() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(3, 5, 42, 44), Box(0, 0, 47, 47),
      ic_sharp_48_content_filter_list_off_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_filter_list 48x48, 4-bit Alpha,  RLE, 31 bytes.
static const uint8_t ic_sharp_48_content_filter_list_data[] PROGMEM = {
  0x80, 0xA9, 0x4F, 0x80, 0xBB, 0x20, 0xFF, 0xFB, 0x75, 0xFF, 0xFB, 0x75, 0xFF, 0xFB, 0x75, 0xFF,
  0xFB, 0x80, 0xBD, 0x00, 0xF9, 0x77, 0x77, 0xF9, 0x77, 0x77, 0xF9, 0x77, 0x77, 0xF9, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_filter_list() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 12, 41, 35), Box(0, 0, 47, 47),
      ic_sharp_48_content_filter_list_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_flag_circle 48x48, 4-bit Alpha,  RLE, 242 bytes.
static const uint8_t ic_sharp_48_content_flag_circle_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xFF, 0xFB, 0x09, 0x76, 0x0A, 0xFF, 0xFD, 0x0A, 0x74, 0x0A, 0xFF, 0xFF, 0x0A, 0x72, 0x09,
  0xFF, 0xFF, 0xA0, 0x97, 0x05, 0xFF, 0xFF, 0xC0, 0x55, 0x01, 0x0E, 0xFF, 0xFF, 0xC0, 0xE0, 0x14,
  0x09, 0xFA, 0x75, 0x0B, 0xFD, 0x09, 0x30, 0x1F, 0xB7, 0x50, 0x3F, 0xE0, 0x12, 0x08, 0xFB, 0x76,
  0x0B, 0xFD, 0x08, 0x20, 0xDF, 0xB7, 0x60, 0x3F, 0xD8, 0x1D, 0x03, 0xFC, 0x77, 0x6F, 0x03, 0x07,
  0xFC, 0x77, 0x6F, 0x07, 0x0A, 0xFC, 0x77, 0x6F, 0x0A, 0x0C, 0xFC, 0x77, 0x6F, 0x0C, 0x0E, 0xFC,
  0x77, 0x6F, 0x0E, 0xFD, 0x77, 0x6F, 0xFE, 0x77, 0x6F, 0x90, 0xEF, 0xC7, 0x76, 0xF0, 0xE0, 0xCF,
  0xC3, 0xD0, 0x37, 0x4F, 0x0C, 0x0A, 0xFC, 0x3D, 0x0B, 0x74, 0xF0, 0xA0, 0x7F, 0xC3, 0xE0, 0x37,
  0x3F, 0x07, 0x03, 0xFC, 0x3E, 0x0B, 0x73, 0xF8, 0x13, 0x0D, 0xFB, 0x3F, 0xFF, 0xA0, 0xD2, 0x08,
  0xFB, 0x3F, 0xFF, 0xA0, 0x82, 0x01, 0xFB, 0x3F, 0xFF, 0xA0, 0x13, 0x09, 0xFA, 0x3F, 0xFF, 0x90,
  0x94, 0x01, 0x0E, 0xF9, 0x3F, 0xFF, 0x0E, 0x01, 0x50, 0x5F, 0x93, 0xFF, 0xF0, 0x57, 0x09, 0xFF,
  0xFF, 0xA0, 0x97, 0x20, 0xAF, 0xFF, 0xF0, 0xA7, 0x40, 0xAF, 0xFF, 0xD0, 0xA7, 0x60, 0x9F, 0xFF,
  0xB0, 0x97, 0x71, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x73, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17,
  0x76, 0x81, 0x18, 0xDF, 0xD8, 0x1D, 0x81, 0x77, 0x74, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7,
  0x37, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_flag_circle() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_flag_circle_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_flag 48x48, 4-bit Alpha,  RLE, 56 bytes.
static const uint8_t ic_sharp_48_content_flag_data[] PROGMEM = {
  0xFF, 0xC0, 0x17, 0x4F, 0xFC, 0x04, 0x74, 0xFF, 0xC0, 0x77, 0x4F, 0xFC, 0x0A, 0x74, 0x80, 0xFC,
  0x0F, 0x74, 0x0A, 0xFF, 0xC7, 0x40, 0x7F, 0xFC, 0x74, 0x04, 0xFF, 0xC7, 0x40, 0x1F, 0xFC, 0x77,
  0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75,
  0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x50,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_flag() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 8, 39, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_flag_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_font_download_off 48x48, 4-bit Alpha,  RLE, 310 bytes.
static const uint8_t ic_sharp_48_content_font_download_off_data[] PROGMEM = {
  0x20, 0x20, 0x75, 0x0C, 0xFF, 0xFF, 0x98, 0x1D, 0xA1, 0x28, 0x22, 0xEF, 0x75, 0x0C, 0xFF, 0xFF,
  0xA8, 0x2E, 0x12, 0xEB, 0x07, 0x50, 0xCF, 0xFF, 0xFA, 0x81, 0xA3, 0xEC, 0x07, 0x50, 0xCF, 0xFF,
  0xF9, 0x82, 0xD0, 0x3E, 0xC0, 0x75, 0x0C, 0xFF, 0xFF, 0x92, 0x03, 0xD0, 0x75, 0x0C, 0xFF, 0xFF,
  0x3E, 0x07, 0x50, 0xCF, 0xFF, 0xE3, 0xF0, 0x75, 0x0C, 0xFF, 0xFD, 0x3F, 0x90, 0x75, 0x0C, 0xA0,
  0xA4, 0x0A, 0xFF, 0xB3, 0xFA, 0x07, 0x58, 0x1C, 0xF4, 0x40, 0x4F, 0xFB, 0x3F, 0xB0, 0x75, 0x0A,
  0x60, 0xEF, 0xFA, 0x3F, 0xC0, 0x77, 0x40, 0x8F, 0xFA, 0x3F, 0xD0, 0x76, 0x00, 0x12, 0x03, 0xFF,
  0xA3, 0xFE, 0x07, 0x50, 0x07, 0x30, 0xCF, 0xF9, 0x3F, 0xF0, 0x75, 0x09, 0x30, 0x6F, 0xF9, 0x3F,
  0xF9, 0x07, 0x71, 0x01, 0xFF, 0x93, 0xFF, 0xA0, 0x77, 0x10, 0xAF, 0xF3, 0xFF, 0xB0, 0x77, 0x04,
  0xFF, 0x3F, 0xFC, 0x07, 0x70, 0xEF, 0xE3, 0xFE, 0x0A, 0x0E, 0xC0, 0x76, 0x08, 0xFE, 0x3F, 0xE8,
  0x12, 0x3E, 0xC0, 0x75, 0x02, 0xFE, 0x3F, 0xD0, 0xB2, 0x03, 0x0E, 0xC0, 0x75, 0x0B, 0xFD, 0x3F,
  0xD0, 0x53, 0x03, 0x0E, 0xC0, 0x74, 0x01, 0x0C, 0xFC, 0x3F, 0xC0, 0xE5, 0x03, 0x0E, 0xC0, 0x74,
  0x01, 0x0C, 0xFB, 0x3F, 0xC0, 0x96, 0x03, 0x0E, 0xC0, 0x74, 0x01, 0x0C, 0xFA, 0x3F, 0xC0, 0x33,
  0x80, 0x01, 0x05, 0xD0, 0x74, 0x01, 0x0C, 0xF9, 0x3F, 0xB0, 0xD3, 0x01, 0xFC, 0x07, 0x50, 0xCF,
  0x3F, 0xB0, 0x73, 0x06, 0xFD, 0x07, 0x50, 0xCE, 0x3F, 0xB0, 0x23, 0x0C, 0xFE, 0x07, 0x50, 0xCD,
  0x3F, 0xA0, 0xB3, 0x02, 0xFF, 0x90, 0x75, 0x0C, 0xC3, 0xFA, 0x05, 0x30, 0x7F, 0xFA, 0x07, 0x50,
  0xCB, 0x3F, 0x90, 0xE4, 0x0D, 0xFF, 0xB0, 0x75, 0x0C, 0xA3, 0xFF, 0xFF, 0xC0, 0x75, 0x0C, 0x93,
  0xFF, 0xFF, 0xD0, 0x75, 0x0C, 0x3F, 0xFF, 0xFE, 0x07, 0x71, 0xFF, 0xFF, 0xF0, 0x77, 0x0D, 0xFF,
  0xFF, 0xF0, 0x76, 0x0A, 0x80, 0xC0, 0xF0, 0x75, 0x01, 0x0E, 0x80, 0xC0, 0xF0, 0x75, 0x81, 0x1A,
  0xDF, 0xFF, 0xFF, 0x07, 0x80, 0xC1, 0x00, 0x30, 0xEA, 0x0E, 0x02, 0x80, 0xC2, 0x08, 0x23, 0xEE,
  0x28, 0x0C, 0x40, 0x03, 0x02, 0x20,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_font_download_off() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(1, 4, 43, 46), Box(0, 0, 47, 47),
      ic_sharp_48_content_font_download_off_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_font_download 48x48, 4-bit Alpha,  RLE, 221 bytes.
static const uint8_t ic_sharp_48_content_font_download_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0xC8, 0x4D, 0xA1, 0x01, 0xE8, 0x0C, 0x0F, 0x81, 0xE1, 0xA8, 0x0C,
  0x2F, 0x0A, 0x0D, 0x80, 0xC2, 0xF0, 0xD8, 0x0A, 0x85, 0xF0, 0xE4, 0x0E, 0xFF, 0xFF, 0xE0, 0x84,
  0x08, 0xFF, 0xFF, 0xE0, 0x24, 0x02, 0xFF, 0xFF, 0xD0, 0xB6, 0x0B, 0xFF, 0xFF, 0xC0, 0x56, 0x05,
  0xFF, 0xFF, 0xB0, 0xE3, 0x00, 0x33, 0x0E, 0xFF, 0xFF, 0xA0, 0x93, 0x00, 0x83, 0x09, 0xFF, 0xFF,
  0xA0, 0x33, 0x00, 0xE3, 0x03, 0xFF, 0xFF, 0x90, 0xC3, 0x05, 0xA0, 0x53, 0x0C, 0xFF, 0xFF, 0x06,
  0x30, 0xAA, 0x0A, 0x30, 0x6F, 0xFF, 0xE0, 0xE3, 0x01, 0xC0, 0x13, 0x0E, 0xFF, 0xFD, 0x09, 0x30,
  0x7C, 0x07, 0x30, 0x9F, 0xFF, 0xD0, 0x33, 0x0C, 0xC0, 0xC3, 0x03, 0xFF, 0xFC, 0x0C, 0x30, 0x3E,
  0x03, 0x30, 0xCF, 0xFF, 0xB0, 0x63, 0x08, 0xE0, 0x83, 0x06, 0xFF, 0xFB, 0x01, 0x30, 0xEE, 0x0E,
  0x30, 0x1F, 0xFF, 0xA0, 0xA7, 0x72, 0x0A, 0xFF, 0xF9, 0x04, 0x77, 0x20, 0x4F, 0xFF, 0x0D, 0x77,
  0x40, 0xDF, 0xFE, 0x07, 0x77, 0x40, 0x7F, 0xFE, 0x01, 0x30, 0xDF, 0xB0, 0xC3, 0x01, 0xFF, 0xD0,
  0xA3, 0x03, 0xFD, 0x02, 0x30, 0xAF, 0xFC, 0x04, 0x30, 0x9F, 0xD0, 0x83, 0x04, 0xFF, 0xB0, 0xD4,
  0x0E, 0xFD, 0x0E, 0x40, 0xDF, 0xFA, 0x07, 0x30, 0x5F, 0xF0, 0x53, 0x07, 0xFF, 0xA0, 0x13, 0x0B,
  0xFF, 0x0B, 0x30, 0x18, 0x09, 0xF4, 0xF0, 0xD8, 0x0C, 0x2F, 0x0D, 0x0A, 0x80, 0xC2, 0xF8, 0x1A,
  0x1E, 0x80, 0xC0, 0xF8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF, 0xFC, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_font_download() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_font_download_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_forward 48x48, 4-bit Alpha,  RLE, 117 bytes.
static const uint8_t ic_sharp_48_content_forward_data[] PROGMEM = {
  0x77, 0x20, 0x77, 0x77, 0x73, 0x90, 0x77, 0x77, 0x72, 0xA0, 0x77, 0x77, 0x71, 0xB0, 0x77, 0x77,
  0x7C, 0x07, 0x77, 0x76, 0xD0, 0x77, 0x77, 0x5E, 0x07, 0x77, 0x74, 0xF0, 0x77, 0x1F, 0xFF, 0xB0,
  0x77, 0xFF, 0xFC, 0x07, 0x6F, 0xFF, 0xD0, 0x75, 0xFF, 0xFE, 0x07, 0x4F, 0xFF, 0xF0, 0x73, 0xFF,
  0xFF, 0x90, 0x72, 0xFF, 0xFF, 0xA0, 0x71, 0xFF, 0xFF, 0xB0, 0x7F, 0xFF, 0xFB, 0x07, 0xFF, 0xFF,
  0xA0, 0x71, 0xFF, 0xFF, 0x90, 0x72, 0xFF, 0xFF, 0x07, 0x3F, 0xFF, 0xE0, 0x74, 0xFF, 0xFD, 0x07,
  0x5F, 0xFF, 0xC0, 0x76, 0xFF, 0xFB, 0x07, 0x77, 0x72, 0xF0, 0x77, 0x77, 0x3E, 0x07, 0x77, 0x74,
  0xD0, 0x77, 0x77, 0x5C, 0x07, 0x77, 0x76, 0xB0, 0x77, 0x77, 0x7A, 0x07, 0x77, 0x77, 0x19, 0x07,
  0x77, 0x77, 0x20, 0x77, 0x71,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_forward() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(8, 8, 39, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_forward_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_gesture 48x48, 4-bit Alpha,  RLE, 293 bytes.
static const uint8_t ic_sharp_48_content_gesture_data[] PROGMEM = {
  0x58, 0x47, 0xBE, 0xEA, 0x27, 0x77, 0x71, 0x05, 0x0E, 0xE0, 0x47, 0x77, 0x60, 0x8F, 0x90, 0xE0,
  0x17, 0x77, 0x40, 0x8F, 0xB0, 0x87, 0x77, 0x30, 0x10, 0xEF, 0xB0, 0xC7, 0x77, 0x40, 0x30, 0xEB,
  0x0B, 0x07, 0xC0, 0xD7, 0x77, 0x58, 0x43, 0xEF, 0x80, 0x1C, 0x0C, 0x77, 0x76, 0x02, 0x06, 0x20,
  0x7C, 0x0A, 0x77, 0x77, 0x20, 0x10, 0xEC, 0x06, 0x77, 0x77, 0x20, 0xBC, 0x0E, 0x01, 0x77, 0x77,
  0x10, 0x6D, 0x07, 0x72, 0x84, 0x37, 0x99, 0x73, 0x77, 0x01, 0x0E, 0xC0, 0xC7, 0x10, 0x60, 0xDE,
  0x0D, 0x03, 0x75, 0x09, 0xD0, 0x26, 0x02, 0x0C, 0xFB, 0x05, 0x73, 0x03, 0xD0, 0x86, 0x04, 0x0E,
  0xFD, 0x03, 0x72, 0x0B, 0xC0, 0xD6, 0x06, 0xFF, 0x0C, 0x71, 0x03, 0xD0, 0x55, 0x06, 0xF8, 0x2A,
  0x78, 0xDD, 0x04, 0x70, 0x9C, 0x0D, 0x50, 0x4E, 0x0C, 0x02, 0x40, 0xBC, 0x09, 0x7D, 0x05, 0x40,
  0x20, 0xED, 0x0A, 0x60, 0x4C, 0x0C, 0x60, 0x4C, 0x0E, 0x40, 0x10, 0xDD, 0x0B, 0x71, 0xD8, 0x54,
  0x33, 0x33, 0x08, 0xC0, 0x84, 0x0B, 0xD0, 0xB6, 0x81, 0x48, 0xCF, 0xB1, 0x0A, 0xC0, 0x53, 0x09,
  0xD0, 0xC5, 0x05, 0x0D, 0xFE, 0x10, 0xAC, 0x04, 0x20, 0x7D, 0x0E, 0x02, 0x30, 0x10, 0xBF, 0xF9,
  0x10, 0x8C, 0x81, 0x80, 0x6E, 0x03, 0x30, 0x20, 0xEF, 0xFA, 0x10, 0x5D, 0x0E, 0xE0, 0x63, 0x02,
  0x0E, 0xFD, 0x80, 0x1B, 0x20, 0xEF, 0xB0, 0x84, 0x0C, 0xE0, 0xA0, 0x5D, 0x70, 0x6F, 0xA0, 0x94,
  0x06, 0xD8, 0x2D, 0x30, 0x3C, 0x0D, 0x71, 0x07, 0xF0, 0x85, 0x0D, 0xC0, 0xC0, 0x12, 0x06, 0xC0,
  0xA7, 0x20, 0x40, 0xBB, 0x0B, 0x04, 0x50, 0x4C, 0x0E, 0x02, 0x30, 0xBC, 0x06, 0x75, 0x01, 0x71,
  0x08, 0xC0, 0x83, 0x02, 0xD0, 0x17, 0x77, 0x0A, 0xC0, 0x53, 0x0B, 0xC0, 0xC7, 0x77, 0x10, 0x9C,
  0x82, 0x90, 0x1A, 0xD0, 0x47, 0x77, 0x10, 0x6D, 0x0E, 0xE0, 0xC7, 0x77, 0x20, 0x10, 0xEF, 0xB0,
  0xE0, 0x27, 0x77, 0x30, 0x5F, 0xA0, 0xE0, 0x37, 0x77, 0x50, 0x6F, 0x0C, 0x02, 0x77, 0x77, 0x85,
  0x18, 0xCE, 0xDA, 0x57, 0x40,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_gesture() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(5, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_gesture_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_how_to_reg 48x48, 4-bit Alpha,  RLE, 208 bytes.
static const uint8_t ic_sharp_48_content_how_to_reg_data[] PROGMEM = {
  0x75, 0x86, 0x28, 0xCE, 0xEC, 0x82, 0x77, 0x77, 0x10, 0x9F, 0x90, 0x97, 0x77, 0x60, 0xBF, 0xB0,
  0xB7, 0x77, 0x40, 0x9F, 0xD0, 0x97, 0x77, 0x20, 0x2F, 0xF0, 0x27, 0x77, 0x10, 0x8F, 0xF0, 0x87,
  0x77, 0x10, 0xCF, 0xF0, 0xC7, 0x77, 0x10, 0xEF, 0xF0, 0xE7, 0x77, 0x10, 0xEF, 0xF0, 0xE7, 0x77,
  0x10, 0xCF, 0xF0, 0xC7, 0x77, 0x10, 0x8F, 0xF0, 0x87, 0x77, 0x10, 0x2F, 0xF0, 0x27, 0x77, 0x20,
  0x9F, 0xD0, 0x97, 0x77, 0x40, 0xBF, 0xB0, 0xB7, 0x77, 0x60, 0x9F, 0x90, 0x97, 0x77, 0x71, 0x86,
  0x28, 0xCE, 0xEC, 0x82, 0x80, 0x9A, 0x60, 0x04, 0x0A, 0x77, 0x77, 0x70, 0x4A, 0x0A, 0x77, 0x77,
  0x50, 0x4C, 0x0A, 0x72, 0x84, 0x14, 0x8A, 0xCD, 0xA0, 0x77, 0x60, 0x4D, 0x05, 0x68, 0x12, 0x7C,
  0xF0, 0x97, 0x60, 0x4D, 0x05, 0x50, 0x40, 0xBF, 0xA0, 0x87, 0x60, 0x4D, 0x05, 0x40, 0x10, 0xBF,
  0xB0, 0x85, 0x07, 0x02, 0x60, 0x4D, 0x05, 0x40, 0x40, 0xEF, 0xB0, 0x85, 0x82, 0x7F, 0xE2, 0x40,
  0x4D, 0x05, 0x40, 0x20, 0xEF, 0xB0, 0x75, 0x07, 0xB0, 0xE0, 0x22, 0x04, 0x0E, 0xC0, 0x55, 0x0A,
  0xFC, 0x07, 0x50, 0x7C, 0x82, 0xE2, 0x4E, 0xC0, 0x56, 0x0E, 0xFD, 0x07, 0x50, 0x7C, 0x00, 0xEC,
  0x06, 0x7F, 0xF0, 0x75, 0x08, 0xF9, 0x06, 0x71, 0xFF, 0x90, 0x75, 0x08, 0xE0, 0x67, 0x2F, 0xFA,
  0x07, 0x50, 0x8C, 0x06, 0x73, 0xFF, 0xB0, 0x75, 0x08, 0xA0, 0x67, 0x77, 0x77, 0x08, 0x06, 0x75,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_how_to_reg() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 8, 43, 40), Box(0, 0, 47, 47),
      ic_sharp_48_content_how_to_reg_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_how_to_vote 48x48, 4-bit Alpha,  RLE, 283 bytes.
static const uint8_t ic_sharp_48_content_how_to_vote_data[] PROGMEM = {
  0x77, 0x58, 0x25, 0xED, 0x37, 0x77, 0x73, 0x06, 0xB0, 0xE0, 0x37, 0x77, 0x71, 0x06, 0xD0, 0xE0,
  0x37, 0x77, 0x60, 0x6F, 0x0E, 0x03, 0x77, 0x74, 0x06, 0xFA, 0x0E, 0x03, 0x77, 0x72, 0x06, 0xC8,
  0x1E, 0x46, 0xC0, 0xE0, 0x37, 0x77, 0x06, 0xC0, 0xE0, 0x42, 0x06, 0xC0, 0xE0, 0x37, 0x75, 0x06,
  0xC0, 0xE0, 0x44, 0x06, 0xC0, 0xE0, 0x37, 0x73, 0x06, 0xC0, 0xE0, 0x46, 0x06, 0xC0, 0xE0, 0x37,
  0x71, 0x06, 0xC0, 0xE0, 0x47, 0x10, 0x6C, 0x0E, 0x03, 0x76, 0x06, 0xC0, 0xE0, 0x47, 0x30, 0x6C,
  0x0E, 0x03, 0x74, 0x06, 0xC0, 0xE0, 0x47, 0x50, 0x6C, 0x0B, 0x73, 0x06, 0xC0, 0xE0, 0x47, 0x60,
  0x9C, 0x0A, 0x72, 0x05, 0xC0, 0xE0, 0x47, 0x60, 0x9C, 0x0D, 0x01, 0x72, 0x0B, 0xC0, 0x47, 0x60,
  0x9C, 0x0D, 0x02, 0x73, 0x09, 0xC0, 0xB7, 0x50, 0x9C, 0x0D, 0x02, 0x75, 0x0C, 0xC0, 0xB7, 0x30,
  0x9C, 0x0D, 0x02, 0x76, 0x01, 0x0C, 0xC0, 0xB7, 0x10, 0x9C, 0x0D, 0x02, 0x77, 0x10, 0x10, 0xCC,
  0x0B, 0x60, 0x9C, 0x0D, 0x02, 0x77, 0x30, 0x10, 0xCC, 0x0B, 0x40, 0x9C, 0x0D, 0x02, 0x77, 0x50,
  0x10, 0xCC, 0x0B, 0x20, 0x9C, 0x0D, 0x02, 0x77, 0x70, 0x10, 0xCC, 0x0B, 0x09, 0xC0, 0xD0, 0x27,
  0x72, 0x82, 0x7F, 0xE3, 0x30, 0x10, 0xCF, 0x90, 0xD0, 0x23, 0x82, 0x1C, 0xF7, 0x72, 0x07, 0xB0,
  0xE0, 0x33, 0x01, 0x0C, 0xE0, 0xD0, 0x23, 0x01, 0x0C, 0xB0, 0x77, 0x07, 0xD0, 0xE0, 0x33, 0x01,
  0x0C, 0xC0, 0xD0, 0x23, 0x01, 0x0C, 0xD0, 0x75, 0x07, 0xF0, 0xE0, 0x33, 0x01, 0x0C, 0xA0, 0xD0,
  0x23, 0x01, 0x0C, 0xF0, 0x73, 0x07, 0xC0, 0xE0, 0x27, 0x28, 0x17, 0x81, 0x71, 0x02, 0x0E, 0xC8,
  0x17, 0x07, 0xD0, 0x37, 0x77, 0x10, 0x3D, 0x07, 0xD0, 0x57, 0x77, 0x30, 0x5F, 0xA0, 0x67, 0x77,
  0x50, 0x68, 0x0B, 0xB0, 0xF0, 0xDF, 0xFF, 0xFE, 0x0D, 0x0A, 0xFF, 0xFF, 0xE8, 0x1A, 0x1E, 0xFF,
  0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xEF, 0xFF, 0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_how_to_vote() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 4, 41, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_how_to_vote_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_inbox 48x48, 4-bit Alpha,  RLE, 137 bytes.
static const uint8_t ic_sharp_48_content_inbox_data[] PROGMEM = {
  0x18, 0x11, 0xAE, 0xFF, 0xFF, 0x84, 0xDA, 0x10, 0x1E, 0xFF, 0xFF, 0xC8, 0x1E, 0x19, 0xFF, 0xFF,
  0xE0, 0xA0, 0xDF, 0xFF, 0xFE, 0x0D, 0xC7, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97,
  0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77,
  0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F,
  0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97,
  0x77, 0x7F, 0xFA, 0x75, 0xFF, 0xFB, 0x03, 0x73, 0x03, 0xFF, 0xFB, 0x08, 0x73, 0x08, 0xFF, 0xFC,
  0x02, 0x71, 0x02, 0xFF, 0xFD, 0x0D, 0x02, 0x60, 0x20, 0xDF, 0xFF, 0xF0, 0x80, 0x32, 0x03, 0x08,
  0x80, 0x9A, 0x3F, 0x0D, 0xFF, 0xFF, 0xE0, 0xD0, 0xAF, 0xFF, 0xFE, 0x81, 0xA1, 0xEF, 0xFF, 0xFC,
  0x84, 0xE1, 0x01, 0xAE, 0xFF, 0xFF, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_inbox() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_inbox_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_insights 48x48, 4-bit Alpha,  RLE, 280 bytes.
static const uint8_t ic_sharp_48_content_insights_data[] PROGMEM = {
  0x77, 0x76, 0x00, 0x38, 0x0C, 0x60, 0x00, 0xA8, 0x0C, 0x50, 0x01, 0xA0, 0x28, 0x0C, 0x40, 0x08,
  0xA0, 0x98, 0x0C, 0x20, 0x02, 0x08, 0xC0, 0x80, 0x27, 0x77, 0x76, 0x03, 0x0A, 0xF9, 0x0A, 0x03,
  0x77, 0x00, 0x17, 0x72, 0x03, 0x0A, 0xF9, 0x0A, 0x03, 0x77, 0x00, 0x57, 0x74, 0x02, 0x08, 0xC0,
  0x80, 0x27, 0x72, 0x00, 0x97, 0x76, 0x08, 0xA0, 0x97, 0x74, 0x00, 0xD7, 0x76, 0x01, 0xA0, 0x27,
  0x78, 0x21, 0x59, 0xDA, 0x82, 0xD9, 0x51, 0x77, 0x30, 0x0A, 0x71, 0x89, 0x12, 0xAE, 0xDA, 0x10,
  0x15, 0x9D, 0xA8, 0x2D, 0x95, 0x17, 0x73, 0x00, 0x37, 0x02, 0x0E, 0xC0, 0xE0, 0x14, 0x00, 0xD7,
  0x28, 0x42, 0xAE, 0xEA, 0x27, 0x71, 0x0A, 0xE0, 0xA4, 0x00, 0x97, 0x10, 0x20, 0xEC, 0x0E, 0x02,
  0x77, 0x0E, 0xE0, 0xD4, 0x00, 0x57, 0x10, 0xAE, 0x0A, 0x77, 0x0E, 0xE0, 0xE4, 0x00, 0x17, 0x10,
  0xEE, 0x0E, 0x76, 0x05, 0xF0, 0xA7, 0x70, 0xEE, 0x0D, 0x75, 0x05, 0xF0, 0xE0, 0x27, 0x60, 0x5F,
  0x90, 0x57, 0x30, 0x5D, 0x82, 0xDD, 0xA2, 0x76, 0x05, 0xFB, 0x05, 0x71, 0x05, 0xD0, 0x57, 0x72,
  0x05, 0xD0, 0x0E, 0xD0, 0x56, 0x05, 0xD0, 0x57, 0x72, 0x05, 0xD0, 0x52, 0x05, 0xD0, 0x54, 0x05,
  0xD0, 0x57, 0x72, 0x05, 0xD0, 0x54, 0x05, 0xD0, 0x52, 0x05, 0xD0, 0x57, 0x72, 0x05, 0xD0, 0x56,
  0x05, 0xD0, 0x0E, 0xD0, 0x57, 0x72, 0x05, 0xD0, 0x57, 0x10, 0x5F, 0xB0, 0x57, 0x72, 0x05, 0xD0,
  0x57, 0x30, 0x5F, 0x90, 0x57, 0x72, 0x05, 0xD0, 0x57, 0x50, 0xDE, 0x0E, 0x76, 0x82, 0x2A, 0xDD,
  0xD0, 0x57, 0x60, 0xEE, 0x0E, 0x75, 0x02, 0x0E, 0xF0, 0x57, 0x70, 0xAE, 0x0A, 0x75, 0x0A, 0xF0,
  0x57, 0x71, 0x02, 0x0E, 0xC0, 0xE0, 0x27, 0x50, 0xEE, 0x0E, 0x77, 0x38, 0x42, 0xAE, 0xEA, 0x27,
  0x60, 0xDE, 0x0E, 0x80, 0xC0, 0x00, 0xAE, 0x0A, 0x80, 0xC0, 0x00, 0x10, 0xEC, 0x0E, 0x02, 0x80,
  0xC1, 0x08, 0x41, 0xAD, 0xEA, 0x28, 0x0C, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_insights() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(2, 6, 45, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_insights_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_inventory_2 48x48, 4-bit Alpha,  RLE, 153 bytes.
static const uint8_t ic_sharp_48_content_inventory_2_data[] PROGMEM = {
  0x18, 0x11, 0x9D, 0xFF, 0xFF, 0xC8, 0x4D, 0x91, 0x01, 0xD8, 0x0C, 0x0F, 0x81, 0xD1, 0x98, 0x0C,
  0x2F, 0x09, 0x0D, 0x80, 0xC2, 0xF0, 0xDC, 0x77, 0x77, 0x4F, 0x97, 0x77, 0x74, 0xF9, 0x77, 0x77,
  0x4F, 0x97, 0x77, 0x74, 0xF9, 0x77, 0x77, 0x4F, 0x97, 0x77, 0x74, 0xC0, 0xE8, 0x0C, 0x2F, 0x0E,
  0x0A, 0x80, 0xC2, 0xF8, 0x1A, 0x1D, 0x80, 0xC0, 0xF8, 0x2D, 0x10, 0x18, 0x0C, 0x0F, 0x01, 0x38,
  0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C,
  0x0F, 0x4F, 0xD7, 0x5F, 0xD4, 0xFD, 0x75, 0xFD, 0x4F, 0xD7, 0x5F, 0xD4, 0xFD, 0x75, 0xFD, 0x48,
  0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C,
  0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F,
  0x48, 0x0C, 0x0F, 0x40, 0xDF, 0xFF, 0xFE, 0x0D, 0x40, 0x9F, 0xFF, 0xFE, 0x09, 0x50, 0xDF, 0xFF,
  0xFC, 0x0D, 0x70, 0x80, 0xDF, 0xFF, 0xF0, 0xD0, 0x84,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_inventory_2() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_inventory_2_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_inventory 48x48, 4-bit Alpha,  RLE, 153 bytes.
static const uint8_t ic_sharp_48_content_inventory_data[] PROGMEM = {
  0x18, 0x11, 0x9D, 0xFF, 0xFF, 0xC8, 0x4D, 0x91, 0x01, 0xD8, 0x0C, 0x0F, 0x81, 0xD1, 0x98, 0x0C,
  0x2F, 0x09, 0x0D, 0x80, 0xC2, 0xF0, 0xDC, 0x77, 0x77, 0x4F, 0x97, 0x77, 0x74, 0xF9, 0x77, 0x77,
  0x4F, 0x97, 0x77, 0x74, 0xF9, 0x77, 0x77, 0x4F, 0x97, 0x77, 0x74, 0xC0, 0xE8, 0x0C, 0x2F, 0x0E,
  0x0A, 0x80, 0xC2, 0xF8, 0x1A, 0x1D, 0x80, 0xC0, 0xF8, 0x2D, 0x10, 0x18, 0x0C, 0x0F, 0x01, 0x38,
  0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C,
  0x0F, 0x4F, 0xD7, 0x5F, 0xD4, 0xFD, 0x75, 0xFD, 0x4F, 0xD7, 0x5F, 0xD4, 0xFD, 0x75, 0xFD, 0x48,
  0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C,
  0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F, 0x48, 0x0C, 0x0F,
  0x48, 0x0C, 0x0F, 0x40, 0xDF, 0xFF, 0xFE, 0x0D, 0x40, 0x9F, 0xFF, 0xFE, 0x09, 0x50, 0xDF, 0xFF,
  0xFC, 0x0D, 0x70, 0x80, 0xDF, 0xFF, 0xF0, 0xD0, 0x84,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_inventory() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_inventory_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_link_off 48x48, 4-bit Alpha,  RLE, 328 bytes.
static const uint8_t ic_sharp_48_content_link_off_data[] PROGMEM = {
  0x18, 0x11, 0xB2, 0x80, 0xC0, 0x08, 0x31, 0xDF, 0xD2, 0x77, 0x77, 0x70, 0xBB, 0x0D, 0x02, 0x77,
  0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60,
  0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB,
  0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xEB, 0x0D, 0x02, 0x73, 0xF9, 0x82, 0xED, 0x95, 0x73, 0x04,
  0x0D, 0xD0, 0xD0, 0x27, 0x2F, 0xD0, 0xD0, 0x47, 0x08, 0xF9, 0x0D, 0x02, 0x71, 0xFF, 0x08, 0x50,
  0x8E, 0x0E, 0xB0, 0xD0, 0x27, 0x80, 0x4B, 0x0D, 0x0E, 0xD0, 0x83, 0x04, 0xC8, 0x3D, 0x50, 0x2D,
  0xB0, 0xD0, 0x27, 0x72, 0x05, 0x0D, 0xC0, 0x42, 0x0D, 0xB0, 0xB4, 0x02, 0x0D, 0xB0, 0xD0, 0x27,
  0x73, 0x0B, 0xB8, 0x1D, 0x05, 0xB0, 0xD6, 0x02, 0x0D, 0xB0, 0xD0, 0x27, 0x73, 0x0D, 0xB0, 0x50,
  0xAB, 0x05, 0x70, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x20, 0x5B, 0x09, 0x0D, 0xB7, 0x1E, 0x0D, 0x02,
  0x30, 0x10, 0xCB, 0x71, 0xB0, 0xD0, 0xEA, 0x0D, 0x71, 0xF0, 0xD0, 0x23, 0x01, 0x0C, 0xA7, 0x10,
  0xDA, 0x00, 0xEA, 0x0D, 0x71, 0xF9, 0x0D, 0x02, 0x30, 0x10, 0xC9, 0x71, 0x0D, 0xA0, 0xE0, 0xDB,
  0x71, 0xFA, 0x0D, 0x02, 0x30, 0x10, 0xC7, 0x1B, 0x0D, 0x09, 0xB0, 0x57, 0x50, 0x20, 0xDB, 0x0D,
  0x02, 0x74, 0x06, 0xB0, 0xA0, 0x5B, 0x0D, 0x76, 0x02, 0x0D, 0xB0, 0xD0, 0x27, 0x30, 0xEB, 0x81,
  0x50, 0xDB, 0x0B, 0x76, 0x02, 0x0D, 0xB0, 0xD0, 0x27, 0x01, 0x0C, 0xB0, 0xD2, 0x04, 0xC0, 0xD0,
  0x57, 0x50, 0x20, 0xDB, 0x0D, 0x02, 0x50, 0x60, 0xDC, 0x04, 0x30, 0x8D, 0x0E, 0x0D, 0x80, 0x4B,
  0x30, 0x2C, 0x0D, 0x02, 0x30, 0x10, 0xCC, 0x08, 0x50, 0x8F, 0xF4, 0xD0, 0xD0, 0x23, 0x01, 0x0C,
  0xA0, 0x87, 0x04, 0x0D, 0xFD, 0x4E, 0x0D, 0x02, 0x38, 0x11, 0xA4, 0x73, 0x82, 0x59, 0xDE, 0xF9,
  0x4F, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D,
  0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77,
  0x77, 0x60, 0x20, 0xDB, 0x0D, 0x02, 0x77, 0x77, 0x60, 0x20, 0xDB, 0x0B, 0x77, 0x77, 0x78, 0x32,
  0xDF, 0xD1, 0x80, 0xC0, 0x08, 0x12, 0xB1, 0x50,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_link_off() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 6, 43, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_link_off_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_link 48x48, 4-bit Alpha,  RLE, 162 bytes.
static const uint8_t ic_sharp_48_content_link_data[] PROGMEM = {
  0x68, 0x25, 0x9D, 0xEF, 0x94, 0xF9, 0x82, 0xED, 0x95, 0x73, 0x04, 0x0D, 0xFD, 0x4F, 0xD0, 0xD0,
  0x47, 0x08, 0xFF, 0x4F, 0xF0, 0x85, 0x08, 0xD0, 0xE0, 0xD8, 0x04, 0xB4, 0x80, 0x4B, 0x0D, 0x0E,
  0xD0, 0x83, 0x04, 0xC0, 0xD0, 0x57, 0x77, 0x30, 0x50, 0xDC, 0x04, 0x20, 0xDB, 0x0B, 0x77, 0x77,
  0x0B, 0xB8, 0x1D, 0x05, 0xB0, 0xD7, 0x77, 0x72, 0x0D, 0xB0, 0x50, 0x9B, 0x05, 0x77, 0x77, 0x20,
  0x5B, 0x09, 0x0D, 0xB7, 0x1F, 0xFA, 0x71, 0xB0, 0xD0, 0xEA, 0x0D, 0x71, 0xFF, 0xA7, 0x10, 0xDA,
  0x00, 0xEA, 0x0D, 0x71, 0xFF, 0xA7, 0x10, 0xDA, 0x0E, 0x0D, 0xB7, 0x1F, 0xFA, 0x71, 0xB0, 0xD0,
  0x9B, 0x05, 0x77, 0x77, 0x20, 0x5B, 0x09, 0x05, 0xB0, 0xD7, 0x77, 0x72, 0x0D, 0xB8, 0x15, 0x0D,
  0xB0, 0xB7, 0x77, 0x70, 0xBB, 0x0D, 0x20, 0x4C, 0x0D, 0x05, 0x77, 0x73, 0x05, 0x0D, 0xC0, 0x43,
  0x08, 0xD0, 0xE0, 0xD8, 0x04, 0xB4, 0x80, 0x4B, 0x0D, 0x0E, 0xD0, 0x85, 0x08, 0xFF, 0x4F, 0xF0,
  0x87, 0x04, 0x0D, 0xFD, 0x4F, 0xD0, 0xD0, 0x47, 0x38, 0x25, 0x9D, 0xEF, 0x94, 0xF9, 0x82, 0xED,
  0x95, 0x60,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_link() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 14, 43, 33), Box(0, 0, 47, 47),
      ic_sharp_48_content_link_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_low_priority 48x48, 4-bit Alpha,  RLE, 170 bytes.
static const uint8_t ic_sharp_48_content_low_priority_data[] PROGMEM = {
  0x71, 0x83, 0x27, 0xBD, 0xEF, 0x4F, 0xFA, 0x60, 0x30, 0xBF, 0xD4, 0xFF, 0xA5, 0x08, 0xFF, 0x4F,
  0xFA, 0x30, 0x10, 0xBF, 0xF9, 0x4F, 0xFA, 0x30, 0xBD, 0x81, 0xB6, 0x27, 0x77, 0x72, 0x08, 0xC0,
  0xD0, 0x37, 0x77, 0x74, 0x03, 0xC0, 0xB0, 0x17, 0x77, 0x75, 0x0B, 0xB0, 0xD0, 0x17, 0x77, 0x75,
  0x02, 0xC0, 0x37, 0x77, 0x76, 0x07, 0xB0, 0xB7, 0x77, 0x77, 0x0B, 0xB0, 0x67, 0x77, 0x77, 0x0D,
  0xB0, 0x27, 0x75, 0xFF, 0xA0, 0xEB, 0x77, 0x6F, 0xFA, 0x0E, 0xB7, 0x76, 0xFF, 0xA0, 0xDB, 0x02,
  0x77, 0x5F, 0xFA, 0x0B, 0xB0, 0x67, 0x77, 0x77, 0x07, 0xB0, 0xB7, 0x77, 0x77, 0x02, 0xC0, 0x37,
  0x77, 0x77, 0x0B, 0xB0, 0xD0, 0x17, 0x07, 0x77, 0x75, 0x03, 0xC0, 0xB0, 0x16, 0x90, 0x77, 0x77,
  0x50, 0x8C, 0x0D, 0x03, 0x5A, 0x07, 0x77, 0x75, 0x0B, 0xD8, 0x1B, 0x62, 0x2B, 0x07, 0x77, 0x74,
  0x01, 0x0B, 0xFE, 0x07, 0x5F, 0xFA, 0x50, 0x8F, 0xE0, 0x74, 0xFF, 0xA6, 0x03, 0x0B, 0xFC, 0x07,
  0x4F, 0xFA, 0x71, 0x83, 0x27, 0xBD, 0xED, 0x07, 0x5F, 0xFA, 0x77, 0xB0, 0x78, 0x0C, 0x00, 0xA0,
  0x78, 0x0C, 0x10, 0x90, 0x78, 0x0C, 0x20, 0x07, 0x77, 0x74,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_low_priority() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 10, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_low_priority_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_mail 48x48, 4-bit Alpha,  RLE, 162 bytes.
static const uint8_t ic_sharp_48_content_mail_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0xC8, 0x4D, 0xA1, 0x01, 0xE8, 0x0C, 0x0F, 0x81, 0xE1, 0x98, 0x0C,
  0x2F, 0x0A, 0x0D, 0x80, 0xC2, 0xF0, 0xDC, 0x04, 0x0D, 0xFF, 0xFF, 0x0D, 0x04, 0xF9, 0x20, 0x8F,
  0xFF, 0xD0, 0x82, 0xF9, 0x30, 0x30, 0xCF, 0xFF, 0x90, 0xC0, 0x33, 0xF9, 0x50, 0x60, 0xEF, 0xFC,
  0x0E, 0x06, 0x5F, 0x90, 0xA0, 0x14, 0x01, 0x0A, 0xFF, 0xA0, 0xA0, 0x14, 0x01, 0x0A, 0xFA, 0x0E,
  0x06, 0x50, 0x40, 0xDF, 0xD0, 0xD0, 0x45, 0x06, 0x0E, 0xFD, 0x0C, 0x03, 0x50, 0x8F, 0xB0, 0x85,
  0x03, 0x0C, 0xFF, 0xA0, 0x85, 0x03, 0x0C, 0xE0, 0xC0, 0x35, 0x08, 0xFF, 0xD0, 0xD0, 0x45, 0x06,
  0x0E, 0xA0, 0xE0, 0x65, 0x04, 0x0D, 0xFF, 0xF9, 0x0A, 0x01, 0x48, 0x21, 0xAA, 0x14, 0x01, 0x0A,
  0xFF, 0xFC, 0x0E, 0x06, 0x73, 0x06, 0x0E, 0xFF, 0xFF, 0x0C, 0x03, 0x60, 0x30, 0xCF, 0xFF, 0xFC,
  0x08, 0x40, 0x8F, 0xFF, 0xFF, 0x82, 0xD4, 0x4D, 0x80, 0xEB, 0x6F, 0x0D, 0x80, 0xC2, 0xF0, 0xD0,
  0xA8, 0x0C, 0x2F, 0x81, 0xA1, 0xE8, 0x0C, 0x0F, 0x84, 0xE1, 0x01, 0xAD, 0xFF, 0xFF, 0xC8, 0x1D,
  0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_mail() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 8, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_mail_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_markunread 48x48, 4-bit Alpha,  RLE, 162 bytes.
static const uint8_t ic_sharp_48_content_markunread_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFF, 0xC8, 0x4D, 0xA1, 0x01, 0xE8, 0x0C, 0x0F, 0x81, 0xE1, 0x98, 0x0C,
  0x2F, 0x0A, 0x0D, 0x80, 0xC2, 0xF0, 0xDC, 0x04, 0x0D, 0xFF, 0xFF, 0x0D, 0x04, 0xF9, 0x20, 0x8F,
  0xFF, 0xD0, 0x82, 0xF9, 0x30, 0x30, 0xCF, 0xFF, 0x90, 0xC0, 0x33, 0xF9, 0x50, 0x60, 0xEF, 0xFC,
  0x0E, 0x06, 0x5F, 0x90, 0xA0, 0x14, 0x01, 0x0A, 0xFF, 0xA0, 0xA0, 0x14, 0x01, 0x0A, 0xFA, 0x0E,
  0x06, 0x50, 0x40, 0xDF, 0xD0, 0xD0, 0x45, 0x06, 0x0E, 0xFD, 0x0C, 0x03, 0x50, 0x8F, 0xB0, 0x85,
  0x03, 0x0C, 0xFF, 0xA0, 0x85, 0x03, 0x0C, 0xE0, 0xC0, 0x35, 0x08, 0xFF, 0xD0, 0xD0, 0x45, 0x06,
  0x0E, 0xA0, 0xE0, 0x65, 0x04, 0x0D, 0xFF, 0xF9, 0x0A, 0x01, 0x48, 0x21, 0xAA, 0x14, 0x01, 0x0A,
  0xFF, 0xFC, 0x0E, 0x06, 0x73, 0x06, 0x0E, 0xFF, 0xFF, 0x0C, 0x03, 0x60, 0x30, 0xCF, 0xFF, 0xFC,
  0x08, 0x40, 0x8F, 0xFF, 0xFF, 0x82, 0xD4, 0x4D, 0x80, 0xEB, 0x6F, 0x0D, 0x80, 0xC2, 0xF0, 0xD0,
  0xA8, 0x0C, 0x2F, 0x81, 0xA1, 0xE8, 0x0C, 0x0F, 0x84, 0xE1, 0x01, 0xAD, 0xFF, 0xFF, 0xC8, 0x1D,
  0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_markunread() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 8, 43, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_markunread_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_move_to_inbox 48x48, 4-bit Alpha,  RLE, 162 bytes.
static const uint8_t ic_sharp_48_content_move_to_inbox_data[] PROGMEM = {
  0x18, 0x11, 0xAE, 0xFF, 0xFF, 0x84, 0xDA, 0x10, 0x1E, 0xFF, 0xFF, 0xC8, 0x1E, 0x19, 0xFF, 0xFF,
  0xE0, 0xA0, 0xDF, 0xFF, 0xFE, 0x0D, 0xC7, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x97,
  0x77, 0x7F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F,
  0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x97, 0x3F, 0x96, 0x07, 0xFF, 0x07, 0x6F, 0x97,
  0x07, 0xFD, 0x07, 0x7F, 0x97, 0x10, 0x7F, 0xB0, 0x77, 0x1F, 0x97, 0x20, 0x7F, 0x90, 0x77, 0x2F,
  0x97, 0x30, 0x7E, 0x07, 0x73, 0xF9, 0x74, 0x07, 0xC0, 0x77, 0x4F, 0x97, 0x50, 0x7A, 0x07, 0x75,
  0xF9, 0x76, 0x00, 0x77, 0x6F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0xFA, 0x75, 0xFF, 0xFB, 0x03,
  0x73, 0x03, 0xFF, 0xFB, 0x08, 0x73, 0x08, 0xFF, 0xFC, 0x02, 0x71, 0x02, 0xFF, 0xFD, 0x0D, 0x02,
  0x60, 0x20, 0xDF, 0xFF, 0xF0, 0x80, 0x32, 0x03, 0x08, 0x80, 0x9A, 0x3F, 0x0D, 0xFF, 0xFF, 0xE0,
  0xD0, 0xAF, 0xFF, 0xFE, 0x81, 0xA1, 0xEF, 0xFF, 0xFC, 0x84, 0xE1, 0x01, 0xAE, 0xFF, 0xFF, 0x81,
  0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_move_to_inbox() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_move_to_inbox_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_next_week 48x48, 4-bit Alpha,  RLE, 167 bytes.
static const uint8_t ic_sharp_48_content_next_week_data[] PROGMEM = {
  0x76, 0x81, 0x1A, 0xDF, 0x98, 0x1E, 0xA2, 0x77, 0x74, 0x01, 0x0E, 0xFD, 0x0E, 0x02, 0x77, 0x73,
  0x0A, 0xFF, 0x0A, 0x77, 0x73, 0x0D, 0xFF, 0x0E, 0x77, 0x73, 0xC7, 0x1C, 0x77, 0x73, 0xC7, 0x1C,
  0x77, 0x73, 0xC7, 0x1C, 0x77, 0x73, 0xC7, 0x1C, 0x76, 0x81, 0x1A, 0xDF, 0xFF, 0xFC, 0x84, 0xDA,
  0x10, 0x1E, 0x80, 0xC0, 0xF8, 0x1E, 0x1A, 0x80, 0xC2, 0xF0, 0xA0, 0xD8, 0x0C, 0x2F, 0x0D, 0x80,
  0xA8, 0x5F, 0x00, 0x78, 0x0C, 0x1F, 0x07, 0x20, 0x78, 0x0C, 0x0F, 0x07, 0x30, 0x78, 0x0C, 0x0F,
  0x07, 0x30, 0x78, 0x0C, 0x0F, 0x07, 0x30, 0x78, 0x0C, 0x0F, 0x07, 0x30, 0x78, 0x0C, 0x0F, 0x07,
  0x30, 0x78, 0x0C, 0x0F, 0x07, 0x30, 0x7F, 0xFF, 0xFF, 0x07, 0x30, 0x7F, 0xFF, 0xFE, 0x07, 0x30,
  0x7F, 0xFF, 0xFE, 0x07, 0x30, 0x7F, 0xFF, 0xFE, 0x07, 0x30, 0x7F, 0xFF, 0xFE, 0x07, 0x30, 0x7F,
  0xFF, 0xFE, 0x07, 0x30, 0x7F, 0xFF, 0xFF, 0x07, 0x20, 0x78, 0x0C, 0x1F, 0x00, 0x78, 0x0A, 0x91,
  0xF0, 0xD8, 0x0C, 0x2F, 0x0D, 0x0A, 0x80, 0xC2, 0xF8, 0x1A, 0x1E, 0x80, 0xC0, 0xF8, 0x4E, 0x10,
  0x1A, 0xDF, 0xFF, 0xFC, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_next_week() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 6, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_next_week_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_outlined_flag 48x48, 4-bit Alpha,  RLE, 105 bytes.
static const uint8_t ic_sharp_48_content_outlined_flag_data[] PROGMEM = {
  0xFF, 0xA0, 0x37, 0x6F, 0xFA, 0x0B, 0x76, 0xFF, 0xB0, 0x37, 0x5F, 0xFB, 0x0B, 0x75, 0xC7, 0x30,
  0xBF, 0xFD, 0x73, 0x03, 0xFF, 0xD7, 0x40, 0xBF, 0xFC, 0x74, 0x03, 0xFF, 0xC7, 0x77, 0x1F, 0x97,
  0x77, 0x1F, 0x97, 0x77, 0x1F, 0x97, 0x77, 0x1F, 0x97, 0x77, 0x1F, 0x97, 0x77, 0x1F, 0x97, 0x77,
  0x1F, 0x97, 0x77, 0x1F, 0xFE, 0x03, 0x72, 0xFF, 0xE0, 0xB7, 0x2F, 0xFF, 0x03, 0x71, 0xFF, 0xF0,
  0xB7, 0x1F, 0x97, 0x30, 0xBF, 0xFD, 0x73, 0x03, 0xFF, 0xD7, 0x40, 0xBF, 0xFC, 0x74, 0x03, 0xFF,
  0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75, 0xC7,
  0x77, 0x5C, 0x77, 0x75, 0xC7, 0x77, 0x5C, 0x77, 0x75,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_outlined_flag() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 8, 39, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_outlined_flag_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_policy 48x48, 4-bit Alpha,  RLE, 292 bytes.
static const uint8_t ic_sharp_48_content_policy_data[] PROGMEM = {
  0x77, 0x28, 0x25, 0xCC, 0x57, 0x77, 0x72, 0x06, 0x0D, 0xC0, 0xD0, 0x67, 0x77, 0x48, 0x11, 0x8E,
  0xF9, 0x81, 0xE8, 0x17, 0x76, 0x03, 0x0A, 0xFF, 0x0A, 0x03, 0x77, 0x20, 0x50, 0xCF, 0xFC, 0x0C,
  0x05, 0x75, 0x06, 0x0D, 0xFF, 0xF9, 0x0D, 0x06, 0x78, 0x11, 0x8E, 0xFF, 0xFD, 0x81, 0xE8, 0x12,
  0x03, 0x0A, 0xFF, 0xFF, 0xC0, 0xA0, 0x38, 0x0A, 0xB2, 0xF8, 0x1A, 0x52, 0x28, 0x12, 0x5A, 0xFF,
  0xFD, 0x0A, 0x02, 0x71, 0x02, 0x0A, 0xFF, 0xFA, 0x07, 0x75, 0x06, 0xFF, 0xF0, 0x77, 0x70, 0x6F,
  0xFD, 0x0A, 0x58, 0x46, 0xCE, 0xEC, 0x65, 0x0A, 0xFF, 0xC0, 0x23, 0x01, 0x0C, 0xE0, 0xC0, 0x13,
  0x01, 0x0E, 0xFF, 0xA0, 0xA4, 0x0C, 0xF9, 0x0C, 0x40, 0xAF, 0xFA, 0x05, 0x30, 0x6F, 0xB0, 0x63,
  0x05, 0xF9, 0x0E, 0xF0, 0x23, 0x0C, 0xFB, 0x0C, 0x30, 0x2F, 0x0E, 0x0D, 0xF4, 0x0E, 0xFB, 0x0E,
  0x4F, 0x0D, 0x0C, 0xF0, 0x13, 0x0E, 0xFB, 0x0E, 0x4F, 0x0C, 0x0A, 0xF0, 0x23, 0x0C, 0xFB, 0x0C,
  0x30, 0x2F, 0x0B, 0x08, 0xF0, 0x53, 0x06, 0xFB, 0x06, 0x30, 0x5F, 0x08, 0x04, 0xF0, 0xA4, 0x0C,
  0xF9, 0x0C, 0x40, 0xAF, 0x04, 0x1F, 0x90, 0x23, 0x01, 0x0C, 0xE0, 0xC0, 0x13, 0x01, 0xF9, 0x81,
  0x10, 0xCF, 0x0A, 0x58, 0x46, 0xCE, 0xEC, 0x65, 0x06, 0xF0, 0xC2, 0x07, 0xF9, 0x07, 0x77, 0x20,
  0x9E, 0x06, 0x20, 0x10, 0xEF, 0x90, 0x77, 0x72, 0x09, 0xD0, 0x13, 0x09, 0xFA, 0x0A, 0x02, 0x71,
  0x02, 0x07, 0x50, 0x9B, 0x09, 0x40, 0x2F, 0xC8, 0x1A, 0x52, 0x28, 0x12, 0x5A, 0xA0, 0xA5, 0x09,
  0xA0, 0x25, 0x09, 0xFF, 0xF0, 0xA5, 0x00, 0x97, 0x0D, 0xFF, 0xF0, 0xA7, 0x60, 0x5F, 0xFF, 0x90,
  0xA7, 0x60, 0x9F, 0xFF, 0x90, 0xA7, 0x60, 0xBF, 0xFF, 0x90, 0x77, 0x60, 0xCF, 0xFE, 0x0C, 0x77,
  0x01, 0x0C, 0xFF, 0xC0, 0xC0, 0x17, 0x72, 0x0A, 0xFF, 0xA0, 0xA7, 0x75, 0x07, 0xFF, 0x06, 0x77,
  0x70, 0x20, 0xAF, 0xB0, 0xB0, 0x27, 0x77, 0x30, 0x40, 0xCE, 0x0C, 0x04, 0x77, 0x77, 0x84, 0x27,
  0xCC, 0x72, 0x77, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_policy() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 2, 41, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_policy_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_push_pin 48x48, 4-bit Alpha,  RLE, 136 bytes.
static const uint8_t ic_sharp_48_content_push_pin_data[] PROGMEM = {
  0x20, 0x40, 0xDF, 0xFE, 0x0D, 0x04, 0x40, 0xDF, 0xFF, 0x90, 0xD4, 0x0D, 0xFF, 0xF9, 0x0D, 0x40,
  0x40, 0xDF, 0xFE, 0x0D, 0x04, 0x71, 0xFF, 0xA7, 0x5F, 0xFA, 0x75, 0xFF, 0xA7, 0x5F, 0xFA, 0x75,
  0xFF, 0xA7, 0x5F, 0xFA, 0x75, 0xFF, 0xA7, 0x5F, 0xFA, 0x75, 0xFF, 0xA7, 0x5F, 0xFA, 0x75, 0xFF,
  0xA7, 0x40, 0x3F, 0xFA, 0x03, 0x73, 0x08, 0xFF, 0xA0, 0x87, 0x20, 0x2F, 0xFC, 0x02, 0x70, 0x20,
  0xDF, 0xFC, 0x0D, 0x02, 0x40, 0x30, 0x8F, 0xFF, 0x90, 0x80, 0x31, 0x80, 0x9D, 0x4F, 0x75, 0xB0,
  0xE7, 0x77, 0x3B, 0x0E, 0x77, 0x73, 0xB0, 0xE7, 0x77, 0x3B, 0x0E, 0x77, 0x73, 0xB0, 0xE7, 0x77,
  0x3B, 0x0E, 0x77, 0x73, 0xB0, 0xE7, 0x77, 0x3B, 0x0E, 0x77, 0x73, 0xB0, 0xE7, 0x77, 0x3B, 0x0E,
  0x77, 0x73, 0xB0, 0xE7, 0x77, 0x3B, 0x0E, 0x77, 0x73, 0xB0, 0xE7, 0x77, 0x3B, 0x0E, 0x77, 0x73,
  0x08, 0xA0, 0x67, 0x77, 0x40, 0x80, 0x67, 0x60,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_push_pin() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 4, 37, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_push_pin_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_redo 48x48, 4-bit Alpha,  RLE, 138 bytes.
static const uint8_t ic_sharp_48_content_redo_data[] PROGMEM = {
  0x80, 0xC4, 0x00, 0x78, 0x0C, 0x30, 0x07, 0x97, 0x78, 0x92, 0x37, 0xAC, 0xDF, 0xED, 0xBA, 0x72,
  0x75, 0x07, 0xA7, 0x48, 0x12, 0x8E, 0xFD, 0x81, 0xD9, 0x27, 0x10, 0x7B, 0x72, 0x02, 0x0A, 0xFF,
  0xC0, 0x90, 0x25, 0x07, 0xC7, 0x10, 0x7F, 0xFF, 0x90, 0x73, 0x07, 0xD6, 0x01, 0x0C, 0xFF, 0xFB,
  0x81, 0xB1, 0x7E, 0x50, 0x20, 0xDF, 0x83, 0xEA, 0x63, 0x12, 0x83, 0x13, 0x6B, 0xEF, 0x0E, 0xF4,
  0x02, 0x0E, 0xE0, 0xD0, 0x67, 0x50, 0x70, 0xEF, 0xE3, 0x01, 0x0D, 0xE0, 0x77, 0x72, 0x08, 0xFD,
  0x30, 0xCD, 0x0D, 0x02, 0x77, 0x40, 0x30, 0xEF, 0xB2, 0x07, 0xD0, 0xC0, 0x17, 0x75, 0x07, 0xFC,
  0x10, 0x10, 0xEC, 0x0D, 0x01, 0x77, 0x50, 0x7F, 0xD1, 0x0A, 0xD0, 0x27, 0x75, 0x07, 0xFE, 0x01,
  0xD0, 0x77, 0x75, 0x07, 0xFF, 0x08, 0xC0, 0xD7, 0x75, 0x07, 0xFF, 0x90, 0x70, 0xDB, 0x06, 0x77,
  0x40, 0x7F, 0xFA, 0x28, 0x13, 0x8D, 0x77, 0x40, 0x7F, 0xFB,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_redo() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(3, 14, 43, 31), Box(0, 0, 47, 47),
      ic_sharp_48_content_redo_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_remove_circle_outline 48x48, 4-bit Alpha,  RLE, 315 bytes.
static const uint8_t ic_sharp_48_content_remove_circle_outline_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xF8, 0x2B, 0x63, 0x22, 0x82, 0x23, 0x6B, 0xF0, 0x97, 0x60, 0xAD, 0x0E, 0x06, 0x75, 0x06,
  0x0E, 0xD0, 0xA7, 0x40, 0xAD, 0x07, 0x77, 0x20, 0x7D, 0x0A, 0x72, 0x09, 0xC0, 0xE0, 0x37, 0x74,
  0x03, 0x0E, 0xC0, 0x97, 0x05, 0xC0, 0xC0, 0x17, 0x76, 0x01, 0x0C, 0xC0, 0x55, 0x01, 0x0E, 0xB0,
  0xE0, 0x17, 0x77, 0x10, 0x10, 0xEB, 0x0E, 0x01, 0x40, 0x9C, 0x03, 0x77, 0x73, 0x03, 0xC0, 0x93,
  0x01, 0xC0, 0x77, 0x77, 0x50, 0x7C, 0x01, 0x20, 0x8B, 0x0E, 0x77, 0x77, 0x0E, 0xB0, 0x82, 0x0D,
  0xB0, 0x67, 0x77, 0x70, 0x6B, 0x81, 0xD0, 0x3C, 0x77, 0x77, 0x2C, 0x03, 0x07, 0xB0, 0xB7, 0x77,
  0x72, 0x0B, 0xB0, 0x70, 0xAB, 0x06, 0x77, 0x77, 0x20, 0x6B, 0x0A, 0x0C, 0xB0, 0x37, 0x77, 0x72,
  0x03, 0xB0, 0xC0, 0xEB, 0x02, 0x5F, 0xFE, 0x50, 0x2B, 0x0E, 0xC6, 0xFF, 0xE6, 0xF9, 0x6F, 0xFE,
  0x6C, 0x0E, 0xB0, 0x25, 0xFF, 0xE5, 0x02, 0xB0, 0xE0, 0xCB, 0x03, 0x77, 0x77, 0x20, 0x3B, 0x0C,
  0x0A, 0xB0, 0x67, 0x77, 0x72, 0x06, 0xB0, 0xA0, 0x7B, 0x0B, 0x77, 0x77, 0x20, 0xBB, 0x07, 0x03,
  0xC7, 0x77, 0x72, 0xC8, 0x13, 0x0D, 0xB0, 0x67, 0x77, 0x70, 0x6B, 0x0D, 0x20, 0x8B, 0x0E, 0x77,
  0x77, 0x0E, 0xB0, 0x82, 0x01, 0xC0, 0x77, 0x77, 0x50, 0x7C, 0x01, 0x30, 0x9C, 0x03, 0x77, 0x73,
  0x03, 0xC0, 0x94, 0x01, 0x0E, 0xB0, 0xE0, 0x17, 0x77, 0x10, 0x10, 0xEB, 0x0E, 0x01, 0x50, 0x5C,
  0x0C, 0x01, 0x77, 0x60, 0x10, 0xCC, 0x05, 0x70, 0x9C, 0x0E, 0x03, 0x77, 0x40, 0x30, 0xEC, 0x09,
  0x72, 0x0A, 0xD0, 0x77, 0x72, 0x07, 0xD0, 0xA7, 0x40, 0xAD, 0x0E, 0x06, 0x75, 0x06, 0x0E, 0xD0,
  0xA7, 0x60, 0x9F, 0x82, 0xB6, 0x32, 0x28, 0x22, 0x36, 0xBF, 0x09, 0x77, 0x10, 0x50, 0xEF, 0xFE,
  0x0E, 0x05, 0x77, 0x30, 0x10, 0x9F, 0xFC, 0x09, 0x01, 0x77, 0x68, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x77, 0x48, 0x33, 0x7A, 0xCD, 0xA8, 0x3D, 0xCA, 0x73, 0x77,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_remove_circle_outline() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_remove_circle_outline_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_remove_circle 48x48, 4-bit Alpha,  RLE, 222 bytes.
static const uint8_t ic_sharp_48_content_remove_circle_data[] PROGMEM = {
  0x77, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x77, 0x48, 0x11, 0x8D, 0xFD, 0x81, 0xD8,
  0x17, 0x76, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x73, 0x05, 0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x71,
  0x09, 0xFF, 0xFB, 0x09, 0x76, 0x0A, 0xFF, 0xFD, 0x0A, 0x74, 0x0A, 0xFF, 0xFF, 0x0A, 0x72, 0x09,
  0xFF, 0xFF, 0xA0, 0x97, 0x05, 0xFF, 0xFF, 0xC0, 0x55, 0x01, 0x0E, 0xFF, 0xFF, 0xC0, 0xE0, 0x14,
  0x09, 0xFF, 0xFF, 0xE0, 0x93, 0x01, 0x80, 0xC0, 0xF0, 0x12, 0x08, 0x80, 0xC0, 0xF0, 0x82, 0x0D,
  0x80, 0xC0, 0xF8, 0x1D, 0x03, 0x80, 0xC2, 0xF0, 0x30, 0x78, 0x0C, 0x2F, 0x07, 0x0A, 0x80, 0xC2,
  0xF0, 0xA0, 0xC8, 0x0C, 0x2F, 0x0C, 0x0E, 0xFA, 0x77, 0x6F, 0xA0, 0xEF, 0xB7, 0x76, 0xFF, 0xE7,
  0x76, 0xFB, 0x0E, 0xFA, 0x77, 0x6F, 0xA0, 0xE0, 0xC8, 0x0C, 0x2F, 0x0C, 0x0A, 0x80, 0xC2, 0xF0,
  0xA0, 0x78, 0x0C, 0x2F, 0x07, 0x03, 0x80, 0xC2, 0xF8, 0x13, 0x0D, 0x80, 0xC0, 0xF0, 0xD2, 0x08,
  0x80, 0xC0, 0xF0, 0x82, 0x01, 0x80, 0xC0, 0xF0, 0x13, 0x09, 0xFF, 0xFF, 0xE0, 0x94, 0x01, 0x0E,
  0xFF, 0xFF, 0xC0, 0xE0, 0x15, 0x05, 0xFF, 0xFF, 0xC0, 0x57, 0x09, 0xFF, 0xFF, 0xA0, 0x97, 0x20,
  0xAF, 0xFF, 0xF0, 0xA7, 0x40, 0xAF, 0xFF, 0xD0, 0xA7, 0x60, 0x9F, 0xFF, 0xB0, 0x97, 0x71, 0x05,
  0x0E, 0xFF, 0xE0, 0xE0, 0x57, 0x73, 0x01, 0x09, 0xFF, 0xC0, 0x90, 0x17, 0x76, 0x81, 0x18, 0xDF,
  0xD8, 0x1D, 0x81, 0x77, 0x74, 0x83, 0x37, 0xAC, 0xDA, 0x83, 0xDC, 0xA7, 0x37, 0x70,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_remove_circle() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_remove_circle_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_remove 48x48, 4-bit Alpha,  RLE, 3 bytes.
static const uint8_t ic_sharp_48_content_remove_data[] PROGMEM = {
  0x80, 0x9D, 0x4F,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_remove() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 22, 37, 25), Box(0, 0, 47, 47),
      ic_sharp_48_content_remove_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_reply_all 48x48, 4-bit Alpha,  RLE, 241 bytes.
static const uint8_t ic_sharp_48_content_reply_all_data[] PROGMEM = {
  0x76, 0x07, 0x74, 0x07, 0x77, 0x77, 0x60, 0x79, 0x73, 0x07, 0x97, 0x77, 0x75, 0x07, 0xA7, 0x20,
  0x7A, 0x77, 0x77, 0x40, 0x7B, 0x71, 0x07, 0xB7, 0x77, 0x73, 0x07, 0xC7, 0x07, 0xC7, 0x77, 0x72,
  0x07, 0xD6, 0x07, 0xD7, 0x77, 0x71, 0x07, 0xD0, 0x75, 0x07, 0xE7, 0x77, 0x70, 0x7D, 0x07, 0x50,
  0x7F, 0x77, 0x76, 0x07, 0xD0, 0x75, 0x07, 0xF9, 0x82, 0xEB, 0x84, 0x77, 0x71, 0x07, 0xD0, 0x75,
  0x07, 0xFE, 0x81, 0xEA, 0x47, 0x74, 0x07, 0xD0, 0x75, 0x07, 0xFF, 0xB0, 0xD0, 0x67, 0x71, 0x07,
  0xD0, 0x75, 0x07, 0xFF, 0xE0, 0xD0, 0x47, 0x50, 0x7D, 0x07, 0x50, 0x7F, 0xFF, 0xA0, 0x97, 0x30,
  0x7D, 0x07, 0x50, 0x7F, 0xFF, 0xC0, 0xC0, 0x17, 0x10, 0x7D, 0x07, 0x50, 0x7F, 0xFF, 0xD0, 0xD0,
  0x27, 0x10, 0x7D, 0x07, 0x50, 0x7F, 0xFF, 0xD0, 0xD0, 0x27, 0x10, 0x7D, 0x07, 0x50, 0x7F, 0xFF,
  0xD0, 0xC7, 0x20, 0x7D, 0x07, 0x50, 0x7F, 0xFF, 0xD0, 0x97, 0x20, 0x7D, 0x07, 0x50, 0x7F, 0xFF,
  0xD0, 0x57, 0x20, 0x7D, 0x07, 0x50, 0x7F, 0x98, 0x2C, 0xDD, 0xEF, 0xE0, 0xE0, 0x17, 0x20, 0x7D,
  0x07, 0x50, 0x7F, 0x48, 0x31, 0x35, 0x8C, 0xFA, 0x08, 0x73, 0x07, 0xD0, 0x75, 0x07, 0xE7, 0x30,
  0x50, 0xBF, 0x01, 0x73, 0x07, 0xD6, 0x07, 0xD7, 0x50, 0x20, 0x9D, 0x09, 0x74, 0x07, 0xC7, 0x07,
  0xC7, 0x70, 0x20, 0xBB, 0x0E, 0x75, 0x07, 0xB7, 0x10, 0x7B, 0x77, 0x20, 0x6B, 0x06, 0x75, 0x07,
  0xA7, 0x20, 0x7A, 0x77, 0x38, 0x23, 0xEF, 0xB7, 0x60, 0x79, 0x73, 0x07, 0x97, 0x74, 0x82, 0x2D,
  0xF1, 0x76, 0x07, 0x74, 0x07, 0x77, 0x58, 0x12, 0xE5, 0x80, 0xD2, 0x00, 0x30, 0x98, 0x0D, 0x30,
  0x04,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_reply_all() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(0, 10, 47, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_reply_all_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_reply 48x48, 4-bit Alpha,  RLE, 166 bytes.
static const uint8_t ic_sharp_48_content_reply_data[] PROGMEM = {
  0x76, 0x07, 0x77, 0x77, 0x60, 0x79, 0x77, 0x77, 0x50, 0x7A, 0x77, 0x77, 0x40, 0x7B, 0x77, 0x77,
  0x30, 0x7C, 0x77, 0x77, 0x20, 0x7D, 0x77, 0x77, 0x10, 0x7E, 0x77, 0x77, 0x07, 0xF7, 0x77, 0x60,
  0x7F, 0x98, 0x2E, 0xB8, 0x47, 0x77, 0x10, 0x7F, 0xE8, 0x1E, 0xA4, 0x77, 0x40, 0x7F, 0xFB, 0x0D,
  0x06, 0x77, 0x10, 0x7F, 0xFE, 0x0D, 0x04, 0x75, 0x07, 0xFF, 0xFA, 0x09, 0x73, 0x07, 0xFF, 0xFC,
  0x0C, 0x01, 0x71, 0x07, 0xFF, 0xFD, 0x0D, 0x02, 0x71, 0x07, 0xFF, 0xFD, 0x0D, 0x02, 0x71, 0x07,
  0xFF, 0xFD, 0x0C, 0x72, 0x07, 0xFF, 0xFD, 0x09, 0x72, 0x07, 0xFF, 0xFD, 0x05, 0x72, 0x07, 0xF9,
  0x82, 0xCD, 0xDE, 0xFE, 0x0E, 0x01, 0x72, 0x07, 0xF4, 0x83, 0x13, 0x58, 0xCF, 0xA0, 0x87, 0x30,
  0x7E, 0x73, 0x05, 0x0B, 0xF0, 0x17, 0x30, 0x7D, 0x75, 0x02, 0x09, 0xD0, 0x97, 0x40, 0x7C, 0x77,
  0x02, 0x0B, 0xB0, 0xE7, 0x50, 0x7B, 0x77, 0x20, 0x6B, 0x06, 0x75, 0x07, 0xA7, 0x73, 0x82, 0x3E,
  0xFB, 0x76, 0x07, 0x97, 0x74, 0x82, 0x2D, 0xF1, 0x76, 0x07, 0x77, 0x58, 0x12, 0xE5, 0x77, 0x77,
  0x60, 0x30, 0x97, 0x77, 0x77, 0x04,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_reply() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 10, 41, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_reply_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_report_gmailerrorred 48x48, 4-bit Alpha,  RLE, 228 bytes.
static const uint8_t ic_sharp_48_content_report_gmailerrorred_data[] PROGMEM = {
  0x72, 0x01, 0x0D, 0xFF, 0x0D, 0x01, 0x77, 0x30, 0x10, 0xDF, 0xFA, 0x0D, 0x01, 0x77, 0x10, 0x10,
  0xDF, 0xFC, 0x0D, 0x01, 0x76, 0x01, 0x0D, 0xFF, 0xE0, 0xD0, 0x17, 0x40, 0x10, 0xDC, 0x0A, 0x75,
  0x0A, 0xC0, 0xD0, 0x17, 0x20, 0x10, 0xDC, 0x0A, 0x77, 0x0A, 0xC0, 0xD0, 0x17, 0x01, 0x0D, 0xC0,
  0xA7, 0x72, 0x0A, 0xC0, 0xD0, 0x15, 0x01, 0x0D, 0xC0, 0xA7, 0x74, 0x0A, 0xC0, 0xD0, 0x13, 0x01,
  0x0D, 0xC0, 0xA7, 0x1C, 0x71, 0x0A, 0xC8, 0x3D, 0x10, 0x1D, 0xC0, 0xA7, 0x2C, 0x72, 0x0A, 0xC8,
  0x1D, 0x1D, 0xC0, 0xA7, 0x3C, 0x73, 0x0A, 0xC0, 0xDC, 0x0A, 0x74, 0xC7, 0x40, 0xAF, 0x97, 0x5C,
  0x75, 0xF9, 0x75, 0xC7, 0x5F, 0x97, 0x5C, 0x75, 0xF9, 0x75, 0xC7, 0x5F, 0x97, 0x5C, 0x75, 0xF9,
  0x75, 0xC7, 0x5F, 0x97, 0x5C, 0x75, 0xF9, 0x75, 0xC7, 0x5F, 0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F,
  0x97, 0x77, 0x7F, 0x97, 0x77, 0x7F, 0x90, 0xA7, 0x4C, 0x74, 0x0A, 0xC0, 0xDC, 0x0A, 0x73, 0xC7,
  0x30, 0xAC, 0x81, 0xD1, 0xDC, 0x0A, 0x72, 0xC7, 0x20, 0xAC, 0x83, 0xD1, 0x01, 0xDC, 0x0A, 0x71,
  0xC7, 0x10, 0xAC, 0x0D, 0x01, 0x30, 0x10, 0xDC, 0x0A, 0x77, 0x40, 0xAC, 0x0D, 0x01, 0x50, 0x10,
  0xDC, 0x0A, 0x77, 0x20, 0xAC, 0x0D, 0x01, 0x70, 0x10, 0xDC, 0x0A, 0x77, 0x0A, 0xC0, 0xD0, 0x17,
  0x20, 0x10, 0xDC, 0x0A, 0x75, 0x0A, 0xC0, 0xD0, 0x17, 0x40, 0x10, 0xDF, 0xFE, 0x0D, 0x01, 0x76,
  0x01, 0x0D, 0xFF, 0xC0, 0xD0, 0x17, 0x71, 0x01, 0x0D, 0xFF, 0xA0, 0xD0, 0x17, 0x73, 0x01, 0x0D,
  0xFF, 0x0D, 0x01, 0x72,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_report_gmailerrorred() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_report_gmailerrorred_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_report_off 48x48, 4-bit Alpha,  RLE, 310 bytes.
static const uint8_t ic_sharp_48_content_report_off_data[] PROGMEM = {
  0x20, 0x48, 0x0C, 0x50, 0x81, 0x8F, 0x98, 0x0C, 0x30, 0x08, 0xB0, 0x98, 0x0C, 0x20, 0x07, 0xC0,
  0x97, 0x01, 0x0D, 0xFF, 0x0D, 0x01, 0x76, 0x07, 0xC0, 0x95, 0x01, 0x0D, 0xFF, 0xA0, 0xD0, 0x17,
  0x60, 0x7C, 0x09, 0x40, 0x4F, 0xFC, 0x0D, 0x01, 0x76, 0x07, 0xC0, 0x94, 0x05, 0xFF, 0xC0, 0xD0,
  0x17, 0x60, 0x7C, 0x09, 0x40, 0x5F, 0xFC, 0x0D, 0x01, 0x76, 0x07, 0xC0, 0x94, 0x05, 0xFF, 0xC0,
  0xD0, 0x17, 0x60, 0x7C, 0x09, 0x40, 0x5F, 0xFC, 0x0D, 0x01, 0x75, 0x01, 0x0E, 0xC0, 0x94, 0x05,
  0xFF, 0xC0, 0xD0, 0x17, 0x30, 0x10, 0xDE, 0x09, 0x40, 0x59, 0x4F, 0xE0, 0xD0, 0x17, 0x10, 0x10,
  0xDF, 0x90, 0x94, 0x05, 0x4F, 0xF0, 0xD0, 0x17, 0x0D, 0xFB, 0x09, 0x71, 0xFF, 0x90, 0xD7, 0xFD,
  0x09, 0x7F, 0xFA, 0x7F, 0xE0, 0x96, 0xFF, 0xA7, 0xFF, 0x09, 0x5F, 0xFA, 0x7F, 0xF9, 0x09, 0x40,
  0x5F, 0xF9, 0x7F, 0xFA, 0x09, 0x40, 0x5F, 0xF7, 0xFF, 0xB0, 0x94, 0x05, 0xFE, 0x7F, 0xFC, 0x09,
  0x40, 0x5F, 0xD7, 0xFF, 0xD0, 0x94, 0x05, 0xFC, 0x7F, 0xFE, 0x09, 0x40, 0x5F, 0xB7, 0xFF, 0xF0,
  0x94, 0x05, 0xFA, 0x7F, 0xFF, 0x90, 0x94, 0x05, 0xF9, 0x7F, 0xFF, 0xA0, 0x94, 0x05, 0xF7, 0xFF,
  0xA8, 0x2D, 0x77, 0xDC, 0x09, 0x40, 0x5E, 0x7F, 0xF9, 0x0D, 0x01, 0x20, 0x10, 0xDC, 0x09, 0x40,
  0x5D, 0x70, 0xDF, 0xF0, 0x74, 0x07, 0xD0, 0x94, 0x05, 0xB0, 0xD7, 0x01, 0x0D, 0xFE, 0x07, 0x40,
  0x7E, 0x09, 0x48, 0x25, 0xFD, 0x17, 0x10, 0x10, 0xDF, 0xD0, 0xD0, 0x12, 0x01, 0x0D, 0xF0, 0x94,
  0x04, 0x01, 0x73, 0x01, 0x0D, 0xFD, 0x82, 0xD7, 0x7D, 0xFA, 0x09, 0x77, 0x20, 0x10, 0xDF, 0xFF,
  0xC0, 0x97, 0x72, 0x01, 0x0D, 0xFF, 0xFC, 0x09, 0x77, 0x20, 0x10, 0xDF, 0xFF, 0xC0, 0x97, 0x72,
  0x01, 0x0D, 0xFF, 0xE0, 0xEC, 0x09, 0x77, 0x20, 0x10, 0xDF, 0xFC, 0x81, 0xD1, 0x7C, 0x09, 0x77,
  0x20, 0x10, 0xDF, 0xFA, 0x0D, 0x01, 0x20, 0x7C, 0x09, 0x77, 0x20, 0x10, 0xDF, 0xF0, 0xD0, 0x14,
  0x07, 0xC0, 0x98, 0x0C, 0x20, 0x07, 0xC0, 0x98, 0x0C, 0x20, 0x07, 0xC0, 0x48, 0x0C, 0x20, 0x07,
  0xA0, 0x78, 0x0C, 0x40, 0x00, 0x72,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_report_off() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(2, 3, 44, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_report_off_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_report 48x48, 4-bit Alpha,  RLE, 194 bytes.
static const uint8_t ic_sharp_48_content_report_data[] PROGMEM = {
  0x72, 0x01, 0x0D, 0xFF, 0x0D, 0x01, 0x77, 0x30, 0x10, 0xDF, 0xFA, 0x0D, 0x01, 0x77, 0x10, 0x10,
  0xDF, 0xFC, 0x0D, 0x01, 0x76, 0x01, 0x0D, 0xFF, 0xE0, 0xD0, 0x17, 0x40, 0x10, 0xDF, 0xFF, 0x90,
  0xD0, 0x17, 0x20, 0x10, 0xDF, 0xFF, 0xB0, 0xD0, 0x17, 0x01, 0x0D, 0xFF, 0xFD, 0x0D, 0x01, 0x50,
  0x10, 0xDF, 0xFF, 0xF0, 0xD0, 0x13, 0x01, 0x0D, 0xFE, 0x4F, 0xE8, 0x3D, 0x10, 0x1D, 0xFF, 0x4F,
  0xF8, 0x1D, 0x1D, 0xFF, 0x94, 0xFF, 0x90, 0xDF, 0xFA, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F,
  0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF, 0xFC, 0x4F, 0xFF,
  0xFC, 0x48, 0x0A, 0x90, 0xF8, 0x2D, 0x77, 0xDF, 0xFF, 0xFB, 0x0D, 0x01, 0x20, 0x10, 0xDF, 0xF9,
  0x0D, 0xFF, 0x07, 0x40, 0x7F, 0xF8, 0x1D, 0x1D, 0xFE, 0x07, 0x40, 0x7F, 0xE8, 0x3D, 0x10, 0x1D,
  0xFD, 0x0D, 0x01, 0x20, 0x10, 0xDF, 0xD0, 0xD0, 0x13, 0x01, 0x0D, 0xFD, 0x82, 0xD7, 0x7D, 0xFD,
  0x0D, 0x01, 0x50, 0x10, 0xDF, 0xFF, 0xD0, 0xD0, 0x17, 0x01, 0x0D, 0xFF, 0xFB, 0x0D, 0x01, 0x72,
  0x01, 0x0D, 0xFF, 0xF9, 0x0D, 0x01, 0x74, 0x01, 0x0D, 0xFF, 0xE0, 0xD0, 0x17, 0x60, 0x10, 0xDF,
  0xFC, 0x0D, 0x01, 0x77, 0x10, 0x10, 0xDF, 0xFA, 0x0D, 0x01, 0x77, 0x30, 0x10, 0xDF, 0xF0, 0xD0,
  0x17, 0x20,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_report() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_report_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_save_alt 48x48, 4-bit Alpha,  RLE, 171 bytes.
static const uint8_t ic_sharp_48_content_save_alt_data[] PROGMEM = {
  0x77, 0x2C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77,
  0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C,
  0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x77, 0x4C, 0x77, 0x75, 0x07, 0x03, 0x4C, 0x40, 0x30,
  0x77, 0x75, 0x82, 0x7F, 0xE3, 0x3C, 0x38, 0x23, 0xEF, 0x77, 0x73, 0x07, 0xB0, 0xE0, 0x32, 0xC2,
  0x03, 0x0E, 0xB0, 0x77, 0x72, 0x07, 0xC0, 0xE0, 0x31, 0xC1, 0x03, 0x0E, 0xC0, 0x77, 0x1C, 0x50,
  0x7C, 0x0E, 0x03, 0xC0, 0x30, 0xEC, 0x07, 0x5F, 0x96, 0x07, 0xC0, 0xEC, 0x0E, 0xC0, 0x76, 0xF9,
  0x70, 0x7F, 0xD0, 0x77, 0xF9, 0x71, 0x07, 0xFB, 0x07, 0x71, 0xF9, 0x72, 0x07, 0xF9, 0x07, 0x72,
  0xF9, 0x73, 0x07, 0xE0, 0x77, 0x3F, 0x97, 0x40, 0x7C, 0x07, 0x74, 0xF9, 0x75, 0x07, 0xA0, 0x77,
  0x5F, 0x97, 0x60, 0x07, 0x76, 0xF9, 0x77, 0x77, 0xF9, 0x77, 0x77, 0xF9, 0x77, 0x77, 0xF9, 0x77,
  0x77, 0xF9, 0x77, 0x77, 0xC0, 0xDF, 0xFF, 0xFE, 0x0D, 0x0A, 0xFF, 0xFF, 0xE8, 0x1A, 0x1E, 0xFF,
  0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF, 0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_save_alt() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_save_alt_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_save_as 48x48, 4-bit Alpha,  RLE, 261 bytes.
static const uint8_t ic_sharp_48_content_save_as_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFB, 0x07, 0x75, 0x01, 0x0E, 0xFF, 0xFE, 0x07, 0x74, 0x0A, 0xFF, 0xFF,
  0x90, 0x77, 0x30, 0xDF, 0xFF, 0xFA, 0x07, 0x72, 0xFF, 0xFF, 0xC0, 0x77, 0x1F, 0xFF, 0xFD, 0x07,
  0x7E, 0x77, 0x4F, 0xB0, 0x76, 0xE7, 0x74, 0xFC, 0x07, 0x5E, 0x77, 0x4F, 0xD5, 0xE7, 0x74, 0xFD,
  0x5E, 0x77, 0x4F, 0xD5, 0xE7, 0x74, 0xFD, 0x5E, 0x77, 0x4F, 0xD5, 0xE7, 0x74, 0xFD, 0x58, 0x0C,
  0x0F, 0x58, 0x0C, 0x0F, 0x58, 0x0C, 0x0F, 0x58, 0x0C, 0x0F, 0x5F, 0xF9, 0x08, 0x03, 0x20, 0x30,
  0x8F, 0xF9, 0x5F, 0xE0, 0xD0, 0x26, 0x02, 0x0D, 0xFD, 0x04, 0x5F, 0xE0, 0x27, 0x10, 0x2F, 0xC0,
  0x46, 0xFD, 0x08, 0x73, 0x08, 0xFA, 0x04, 0x7F, 0xD0, 0x37, 0x30, 0x3F, 0x90, 0x47, 0x1F, 0xD7,
  0x5F, 0x04, 0x48, 0x12, 0xA5, 0x2F, 0xD7, 0x5E, 0x04, 0x40, 0x20, 0xDA, 0x06, 0x1F, 0xD0, 0x37,
  0x30, 0x3D, 0x04, 0x50, 0x6C, 0x05, 0xFD, 0x08, 0x73, 0x08, 0xC0, 0x44, 0x82, 0x21, 0x06, 0xB0,
  0xAF, 0xE0, 0x27, 0x10, 0x2C, 0x04, 0x48, 0x72, 0xDD, 0x10, 0x6F, 0xD2, 0xFE, 0x0D, 0x02, 0x60,
  0x20, 0xDB, 0x04, 0x40, 0x20, 0xDA, 0x83, 0xD1, 0x05, 0x21, 0xFF, 0x90, 0x80, 0x32, 0x03, 0x08,
  0xC0, 0x44, 0x02, 0x0D, 0xC0, 0xD0, 0x13, 0xFF, 0xFB, 0x04, 0x40, 0x20, 0xDD, 0x0D, 0x02, 0x3F,
  0xFF, 0xA0, 0x44, 0x02, 0x0D, 0xD0, 0xD0, 0x24, 0x0D, 0xFF, 0xF0, 0x44, 0x02, 0x0D, 0xD0, 0xD0,
  0x25, 0x0A, 0xFF, 0xE0, 0x44, 0x02, 0x0D, 0xD0, 0xD0, 0x26, 0x01, 0x0E, 0xFF, 0xC0, 0x44, 0x02,
  0x0D, 0xD0, 0xD0, 0x27, 0x18, 0x11, 0xAD, 0xFF, 0x90, 0x44, 0x02, 0x0D, 0xD0, 0xD0, 0x27, 0x77,
  0x74, 0x0D, 0xD0, 0xD0, 0x27, 0x77, 0x75, 0xD0, 0xD0, 0x27, 0x77, 0x76, 0xC0, 0xD0, 0x27, 0x77,
  0x77, 0xB0, 0xD0, 0x27, 0x50,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_save_as() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 46, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_save_as_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_save 48x48, 4-bit Alpha,  RLE, 137 bytes.
static const uint8_t ic_sharp_48_content_save_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xFB, 0x07, 0x70, 0x10, 0xEF, 0xFF, 0xE0, 0x76, 0x0A, 0xFF, 0xFF, 0x90,
  0x75, 0x0D, 0xFF, 0xFF, 0xA0, 0x74, 0xC7, 0x76, 0xF9, 0x07, 0x3C, 0x77, 0x6F, 0xA0, 0x72, 0xC7,
  0x76, 0xFB, 0x07, 0x1C, 0x77, 0x6F, 0xC0, 0x7C, 0x77, 0x6F, 0xFA, 0x77, 0x6F, 0xFA, 0x77, 0x6F,
  0xFA, 0x77, 0x68, 0x0C, 0xE7, 0xF0, 0x80, 0x32, 0x03, 0x08, 0xFF, 0xFF, 0x0D, 0x02, 0x60, 0x20,
  0xDF, 0xFF, 0xD0, 0x27, 0x10, 0x2F, 0xFF, 0xC0, 0x87, 0x30, 0x8F, 0xFF, 0xB0, 0x37, 0x30, 0x3F,
  0xFF, 0xB7, 0x5F, 0xFF, 0xB7, 0x5F, 0xFF, 0xB0, 0x37, 0x30, 0x3F, 0xFF, 0xB0, 0x87, 0x30, 0x8F,
  0xFF, 0xC0, 0x27, 0x10, 0x2F, 0xFF, 0xD0, 0xD0, 0x26, 0x02, 0x0D, 0xFF, 0xFF, 0x08, 0x03, 0x20,
  0x30, 0x8F, 0xF9, 0x0D, 0xFF, 0xFF, 0xE0, 0xD0, 0xAF, 0xFF, 0xFE, 0x81, 0xA1, 0xEF, 0xFF, 0xFC,
  0x84, 0xE1, 0x01, 0xAD, 0xFF, 0xFF, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_save() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_save_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_select_all 48x48, 4-bit Alpha,  RLE, 138 bytes.
static const uint8_t ic_sharp_48_content_select_all_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0x4C, 0x4C, 0x4C, 0x48, 0x4D, 0xA1, 0x01, 0xEA, 0x4C, 0x4C, 0x4C, 0x4A, 0x81,
  0xE1, 0xAB, 0x4C, 0x4C, 0x4C, 0x4B, 0x0A, 0x0D, 0xB4, 0xC4, 0xC4, 0xC4, 0xB0, 0xD8, 0x0A, 0x94,
  0x0C, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xC7, 0x1C,
  0x75, 0xC7, 0x72, 0xC7, 0x5C, 0x77, 0x2C, 0x75, 0xC7, 0x72, 0xC7, 0x5C, 0x71, 0xC4, 0xC7, 0x5C,
  0x4F, 0x94, 0xC7, 0x5C, 0x4F, 0x94, 0xC7, 0x5C, 0x4F, 0x94, 0xC7, 0x5C, 0x4C, 0x71, 0xC7, 0x5C,
  0x77, 0x2C, 0x75, 0xC7, 0x72, 0xC7, 0x5C, 0x77, 0x2C, 0x75, 0xC7, 0x1C, 0x4F, 0xFE, 0x4F, 0x94,
  0xFF, 0xE4, 0xF9, 0x4F, 0xFE, 0x4F, 0x94, 0xFF, 0xE4, 0xC8, 0x0A, 0x94, 0x00, 0xDB, 0x4C, 0x4C,
  0x4C, 0x4B, 0x0D, 0x0A, 0xB4, 0xC4, 0xC4, 0xC4, 0xB8, 0x1A, 0x1E, 0xA4, 0xC4, 0xC4, 0xC4, 0xA8,
  0x4E, 0x10, 0x1A, 0xD4, 0xC4, 0xC4, 0xC4, 0x81, 0xDA, 0x11,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_select_all() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_select_all_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_send 48x48, 4-bit Alpha,  RLE, 224 bytes.
static const uint8_t ic_sharp_48_content_send_data[] PROGMEM = {
  0x0C, 0x05, 0x80, 0xC4, 0x0A, 0x81, 0xE7, 0x18, 0x0C, 0x10, 0xD0, 0xA0, 0x37, 0x77, 0x77, 0xF0,
  0xC0, 0x57, 0x77, 0x75, 0xFA, 0x81, 0xE7, 0x17, 0x77, 0x72, 0xFD, 0x0A, 0x03, 0x77, 0x77, 0xFF,
  0x0C, 0x05, 0x77, 0x75, 0xFF, 0xA8, 0x1E, 0x71, 0x77, 0x72, 0xFF, 0xD0, 0xA0, 0x37, 0x77, 0xFF,
  0xF0, 0xC0, 0x57, 0x75, 0xFF, 0xFA, 0x81, 0xE7, 0x17, 0x72, 0xFF, 0xFD, 0x0A, 0x03, 0x77, 0xFF,
  0xFF, 0x0C, 0x05, 0x75, 0xFF, 0xFF, 0xA8, 0x1E, 0x71, 0x72, 0x85, 0x13, 0x57, 0x9B, 0xDF, 0xFF,
  0xD0, 0xA0, 0x37, 0x71, 0x85, 0x24, 0x68, 0xAC, 0xEF, 0xFE, 0x0C, 0x05, 0x77, 0x68, 0x51, 0x35,
  0x79, 0xBD, 0xFF, 0x98, 0x1E, 0x71, 0x77, 0x74, 0x85, 0x24, 0x68, 0xAC, 0xEF, 0xB0, 0xA0, 0x37,
  0x77, 0x28, 0x52, 0x46, 0x8A, 0xCE, 0xFB, 0x0A, 0x03, 0x77, 0x18, 0x51, 0x35, 0x79, 0xBD, 0xFF,
  0x98, 0x1E, 0x71, 0x73, 0x85, 0x24, 0x68, 0xAC, 0xEF, 0xFE, 0x0C, 0x05, 0x58, 0x51, 0x35, 0x79,
  0xBD, 0xFF, 0xFD, 0x0A, 0x03, 0x7F, 0xFF, 0xFA, 0x81, 0xE7, 0x17, 0x2F, 0xFF, 0xF0, 0xC0, 0x57,
  0x5F, 0xFF, 0xD0, 0xA0, 0x37, 0x7F, 0xFF, 0xA8, 0x1E, 0x71, 0x77, 0x2F, 0xFF, 0x0C, 0x05, 0x77,
  0x5F, 0xFD, 0x0A, 0x03, 0x77, 0x7F, 0xFA, 0x81, 0xE7, 0x17, 0x77, 0x2F, 0xF0, 0xC0, 0x57, 0x77,
  0x5F, 0xD0, 0xA0, 0x37, 0x77, 0x7F, 0xA8, 0x1E, 0x71, 0x77, 0x77, 0x2F, 0x0C, 0x05, 0x77, 0x77,
  0x5D, 0x0A, 0x03, 0x77, 0x77, 0x7A, 0x81, 0xE7, 0x18, 0x0C, 0x10, 0x0C, 0x05, 0x80, 0xC4, 0x00,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_send() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 6, 45, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_send_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_shield 48x48, 4-bit Alpha,  RLE, 180 bytes.
static const uint8_t ic_sharp_48_content_shield_data[] PROGMEM = {
  0x77, 0x28, 0x25, 0xCC, 0x57, 0x77, 0x72, 0x06, 0x0D, 0xC0, 0xD0, 0x67, 0x77, 0x48, 0x11, 0x8E,
  0xF9, 0x81, 0xE8, 0x17, 0x76, 0x03, 0x0A, 0xFF, 0x0A, 0x03, 0x77, 0x20, 0x50, 0xCF, 0xFC, 0x0C,
  0x05, 0x75, 0x06, 0x0D, 0xFF, 0xF9, 0x0D, 0x06, 0x78, 0x11, 0x8E, 0xFF, 0xFD, 0x81, 0xE8, 0x12,
  0x03, 0x0A, 0xFF, 0xFF, 0xC0, 0xA0, 0x38, 0x0E, 0xD4, 0xF0, 0xEF, 0xFF, 0xFE, 0x0E, 0x0D, 0xFF,
  0xFF, 0xE0, 0xD0, 0xCF, 0xFF, 0xFE, 0x0C, 0x0A, 0xFF, 0xFF, 0xE0, 0xA0, 0x8F, 0xFF, 0xFE, 0x08,
  0x04, 0xFF, 0xFF, 0xE0, 0x41, 0xFF, 0xFF, 0xE2, 0x0C, 0xFF, 0xFF, 0xC0, 0xC2, 0x07, 0xFF, 0xFF,
  0xC0, 0x72, 0x01, 0x0E, 0xFF, 0xFF, 0xA0, 0xE0, 0x13, 0x09, 0xFF, 0xFF, 0xA0, 0x94, 0x02, 0xFF,
  0xFF, 0xA0, 0x25, 0x09, 0xFF, 0xFF, 0x09, 0x70, 0xDF, 0xFF, 0xD0, 0xD7, 0x10, 0x5F, 0xFF, 0xD0,
  0x57, 0x20, 0x9F, 0xFF, 0xB0, 0x97, 0x40, 0xBF, 0xFF, 0x90, 0xB7, 0x60, 0xCF, 0xFE, 0x0C, 0x77,
  0x01, 0x0C, 0xFF, 0xC0, 0xC0, 0x17, 0x72, 0x0A, 0xFF, 0xA0, 0xA7, 0x75, 0x07, 0xFF, 0x07, 0x77,
  0x70, 0x20, 0xAF, 0xB0, 0xA0, 0x27, 0x77, 0x30, 0x40, 0xCE, 0x0C, 0x04, 0x77, 0x77, 0x84, 0x27,
  0xCC, 0x72, 0x77, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_shield() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 2, 41, 45), Box(0, 0, 47, 47),
      ic_sharp_48_content_shield_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_sort 48x48, 4-bit Alpha,  RLE, 32 bytes.
static const uint8_t ic_sharp_48_content_sort_data[] PROGMEM = {
  0x80, 0xA9, 0x4F, 0x80, 0xBA, 0x40, 0xFF, 0xFB, 0x75, 0xFF, 0xFB, 0x75, 0xFF, 0xFB, 0x75, 0xFF,
  0xFB, 0x80, 0xBC, 0x00, 0xFD, 0x77, 0x73, 0xFD, 0x77, 0x73, 0xFD, 0x77, 0x73, 0xFD, 0x77, 0x73,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_sort() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 12, 41, 35), Box(0, 0, 47, 47),
      ic_sharp_48_content_sort_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_square_foot 48x48, 4-bit Alpha,  RLE, 174 bytes.
static const uint8_t ic_sharp_48_content_square_foot_data[] PROGMEM = {
  0x07, 0x77, 0x77, 0x39, 0x07, 0x77, 0x77, 0x2A, 0x07, 0x77, 0x77, 0x1B, 0x07, 0x77, 0x77, 0xC0,
  0x67, 0x77, 0x6B, 0x0C, 0x01, 0x77, 0x76, 0xA8, 0x3C, 0x10, 0x47, 0x77, 0x74, 0xB0, 0x04, 0xA0,
  0x77, 0x77, 0x3F, 0x90, 0x77, 0x77, 0x2F, 0xA0, 0x77, 0x77, 0x1F, 0xA0, 0x77, 0x77, 0x1F, 0x90,
  0x72, 0x05, 0x77, 0x6F, 0x98, 0x34, 0x0A, 0xF7, 0x77, 0x5F, 0xA0, 0xBB, 0x07, 0x77, 0x4E, 0x0D,
  0xF0, 0x77, 0x73, 0xE0, 0x10, 0xDE, 0x0E, 0x01, 0x77, 0x2E, 0x10, 0x10, 0xDC, 0x82, 0xE2, 0x01,
  0x77, 0x1E, 0x20, 0x10, 0xDB, 0x83, 0x60, 0x2D, 0x77, 0x7E, 0x30, 0x10, 0xDB, 0x06, 0x0D, 0xA0,
  0x77, 0x6E, 0x40, 0x10, 0xDF, 0x07, 0x75, 0xE5, 0x01, 0x0D, 0xF0, 0x57, 0x4E, 0x60, 0x10, 0xDD,
  0x0A, 0x75, 0xE7, 0x01, 0x0D, 0xB0, 0xB2, 0x00, 0x77, 0x2E, 0x71, 0x01, 0x0D, 0xB0, 0x40, 0x7A,
  0x07, 0x71, 0xE7, 0x20, 0x10, 0xDF, 0x07, 0x7E, 0x73, 0x01, 0x0D, 0xF0, 0x76, 0xFF, 0xFC, 0x04,
  0x6F, 0xFF, 0xB8, 0x24, 0x01, 0x64, 0x0D, 0xFF, 0xFA, 0x83, 0x41, 0xCF, 0x73, 0x0A, 0xFF, 0xFB,
  0x0D, 0xB0, 0x72, 0x01, 0x0E, 0xFF, 0xFF, 0x07, 0x28, 0x11, 0xAD, 0xFF, 0xFE, 0x07,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_square_foot() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(8, 8, 39, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_square_foot_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_stacked_bar_chart 48x48, 4-bit Alpha,  RLE, 108 bytes.
static const uint8_t ic_sharp_48_content_stacked_bar_chart_data[] PROGMEM = {
  0xF9, 0x77, 0x73, 0xF9, 0x77, 0x73, 0xF9, 0x77, 0x73, 0xF9, 0x77, 0x73, 0xF9, 0x77, 0x73, 0xF9,
  0x77, 0x73, 0xF9, 0x4F, 0x97, 0x5F, 0x94, 0xF9, 0x77, 0x73, 0xF9, 0x77, 0x73, 0xF9, 0x75, 0xF9,
  0x4F, 0x97, 0x5F, 0x94, 0xF9, 0x75, 0xF9, 0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0xFA, 0x77, 0x2F,
  0xFA, 0x77, 0x2F, 0xFA, 0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0xFA, 0x4F, 0x94, 0xFF, 0xA4, 0xF9,
  0x4F, 0xFA, 0x4F, 0x97, 0x5F, 0x94, 0xF9, 0x75, 0xF9, 0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0xFA,
  0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0xFA, 0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0xFA, 0x4F, 0x94,
  0xFF, 0xA4, 0xF9, 0x4F, 0xFA, 0x4F, 0x94, 0xFF, 0xA4, 0xF9, 0x4F, 0x90,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_stacked_bar_chart() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(8, 8, 39, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_stacked_bar_chart_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_stream 48x48, 4-bit Alpha,  RLE, 333 bytes.
static const uint8_t ic_sharp_48_content_stream_data[] PROGMEM = {
  0x77, 0x38, 0x41, 0xAD, 0xDA, 0x17, 0x77, 0x75, 0x01, 0x0E, 0xC0, 0xE0, 0x17, 0x77, 0x74, 0x0A,
  0xE0, 0xA7, 0x77, 0x74, 0x0D, 0xE0, 0xD7, 0x77, 0x20, 0x47, 0x10, 0xDE, 0x0D, 0x71, 0x04, 0x76,
  0x81, 0x9F, 0x77, 0x0A, 0xE0, 0xA7, 0x81, 0x5F, 0xB7, 0x40, 0x9B, 0x07, 0x60, 0x10, 0xEC, 0x0E,
  0x01, 0x60, 0x5B, 0x0B, 0x72, 0x02, 0x0E, 0xC0, 0x66, 0x84, 0x1A, 0xDD, 0xA1, 0x60, 0x5D, 0x03,
  0x72, 0x03, 0x0E, 0xC0, 0x67, 0x72, 0x05, 0xD0, 0x47, 0x40, 0x30, 0xEC, 0x06, 0x77, 0x05, 0xD0,
  0x47, 0x60, 0x40, 0xEC, 0x06, 0x75, 0x05, 0xD0, 0x47, 0x71, 0x04, 0x0E, 0xC0, 0x67, 0x30, 0x5D,
  0x04, 0x77, 0x30, 0x40, 0xEC, 0x06, 0x71, 0x05, 0xD0, 0x47, 0x75, 0x04, 0xC0, 0xB7, 0x10, 0xCC,
  0x04, 0x77, 0x70, 0x4A, 0x0B, 0x73, 0x0C, 0xA0, 0x47, 0x77, 0x20, 0x40, 0xA7, 0x48, 0x11, 0xB4,
  0x76, 0x84, 0x1A, 0xDD, 0xA1, 0x77, 0x75, 0x87, 0x1A, 0xDD, 0xA1, 0x01, 0xEC, 0x0E, 0x01, 0x77,
  0x73, 0x01, 0x0E, 0xC8, 0x1E, 0x1A, 0xE0, 0xA7, 0x77, 0x30, 0xAE, 0x0A, 0x0D, 0xE0, 0xD7, 0x77,
  0x30, 0xDE, 0x00, 0xDE, 0x0D, 0x77, 0x73, 0x0D, 0xE0, 0xD0, 0xAE, 0x0A, 0x77, 0x73, 0x0A, 0xE8,
  0x1A, 0x1E, 0xC0, 0xE0, 0x17, 0x77, 0x30, 0x10, 0xEC, 0x87, 0xE1, 0x01, 0xAD, 0xDA, 0x17, 0x77,
  0x58, 0x41, 0xAD, 0xDA, 0x17, 0x60, 0x60, 0xB7, 0x50, 0xB0, 0x77, 0x77, 0x20, 0x6A, 0x0B, 0x73,
  0x0B, 0xA0, 0x77, 0x77, 0x06, 0xC0, 0xB7, 0x10, 0xBC, 0x07, 0x77, 0x50, 0x6C, 0x0E, 0x04, 0x71,
  0x03, 0x0E, 0xC0, 0x67, 0x73, 0x06, 0xC0, 0xE0, 0x37, 0x30, 0x30, 0xEC, 0x06, 0x77, 0x10, 0x6C,
  0x0E, 0x03, 0x75, 0x03, 0x0E, 0xC0, 0x67, 0x60, 0x7C, 0x0E, 0x03, 0x77, 0x03, 0x0E, 0xC0, 0x67,
  0x40, 0x7C, 0x0E, 0x03, 0x77, 0x20, 0x40, 0xEC, 0x06, 0x72, 0x04, 0xC0, 0xE0, 0x36, 0x84, 0x1A,
  0xDD, 0xA1, 0x60, 0x40, 0xEC, 0x04, 0x72, 0x09, 0xA0, 0xE0, 0x36, 0x01, 0x0E, 0xC0, 0xE0, 0x16,
  0x04, 0x0E, 0xA0, 0x97, 0x48, 0x19, 0xE3, 0x70, 0xAE, 0x0A, 0x78, 0x14, 0xE9, 0x76, 0x02, 0x71,
  0x0D, 0xE0, 0xD7, 0x10, 0x27, 0x77, 0x20, 0xDE, 0x0D, 0x77, 0x77, 0x40, 0xAE, 0x0A, 0x77, 0x77,
  0x40, 0x10, 0xEC, 0x0E, 0x01, 0x77, 0x77, 0x58, 0x41, 0xAD, 0xDA, 0x17, 0x73,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_stream() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 43, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_stream_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_tag 48x48, 4-bit Alpha,  RLE, 92 bytes.
static const uint8_t ic_sharp_48_content_tag_data[] PROGMEM = {
  0x71, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7,
  0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x18, 0x09, 0xF4, 0xF7,
  0x1C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71,
  0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x71, 0x80, 0x9F, 0x4F, 0x71,
  0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C,
  0x77, 0x2C, 0x71, 0xC7, 0x72, 0xC7, 0x1C, 0x77, 0x2C, 0x71, 0xC7, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_tag() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(8, 8, 39, 39), Box(0, 0, 47, 47),
      ic_sharp_48_content_tag_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_text_format 48x48, 4-bit Alpha,  RLE, 137 bytes.
static const uint8_t ic_sharp_48_content_text_format_data[] PROGMEM = {
  0x75, 0x0B, 0xA0, 0xB7, 0x77, 0x20, 0x2C, 0x02, 0x77, 0x71, 0x09, 0xC0, 0x97, 0x77, 0x10, 0xEC,
  0x0E, 0x77, 0x70, 0x6A, 0x00, 0xCA, 0x06, 0x77, 0x60, 0xDA, 0x00, 0x6A, 0x0D, 0x77, 0x50, 0x4B,
  0x00, 0x1B, 0x04, 0x77, 0x40, 0xBA, 0x0A, 0x20, 0xAA, 0x0B, 0x77, 0x30, 0x2B, 0x04, 0x20, 0x4B,
  0x02, 0x77, 0x20, 0x9A, 0x0E, 0x40, 0xEA, 0x09, 0x77, 0x10, 0x10, 0xEA, 0x08, 0x40, 0x8A, 0x0E,
  0x01, 0x77, 0x07, 0xB0, 0x34, 0x03, 0xB0, 0x77, 0x70, 0xDA, 0x0C, 0x60, 0xCA, 0x0D, 0x76, 0x05,
  0xB0, 0x66, 0x06, 0xB0, 0x57, 0x50, 0xBF, 0xF0, 0xB7, 0x40, 0x3F, 0xFA, 0x03, 0x73, 0x09, 0xFF,
  0xA0, 0x97, 0x20, 0x1C, 0x80, 0x69, 0xC0, 0x17, 0x10, 0x7B, 0x09, 0x73, 0x09, 0xB0, 0x77, 0x10,
  0xDB, 0x03, 0x73, 0x03, 0xB0, 0xD7, 0x05, 0xB0, 0xC7, 0x50, 0xCB, 0x05, 0x60, 0xCB, 0x06, 0x75,
  0x06, 0xB0, 0xC8, 0x09, 0xD7, 0x08, 0x09, 0xD4, 0xF0,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_text_format() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 8, 37, 37), Box(0, 0, 47, 47),
      ic_sharp_48_content_text_format_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_unarchive 48x48, 4-bit Alpha,  RLE, 132 bytes.
static const uint8_t ic_sharp_48_content_unarchive_data[] PROGMEM = {
  0x40, 0x80, 0xEF, 0xFF, 0xB0, 0xD0, 0x87, 0x09, 0xFF, 0xFF, 0x0A, 0x50, 0x7A, 0x07, 0x77, 0x73,
  0x0A, 0xA0, 0x73, 0x04, 0xA0, 0xA7, 0x77, 0x50, 0xAA, 0x82, 0x50, 0x2E, 0xFF, 0xFF, 0xC8, 0x1E,
  0x2A, 0xFF, 0xFF, 0xE0, 0xA0, 0xEF, 0xFF, 0xFE, 0x0E, 0x80, 0xBC, 0x5F, 0x00, 0x7F, 0xFF, 0xFD,
  0x07, 0x20, 0x7F, 0xFF, 0xFB, 0x07, 0x40, 0x7F, 0xFF, 0xF9, 0x07, 0x60, 0x7F, 0xFF, 0xE0, 0x77,
  0x10, 0x7F, 0xFF, 0xC0, 0x77, 0x30, 0x7F, 0xFF, 0xA0, 0x77, 0x50, 0x7F, 0xFF, 0x07, 0x77, 0x07,
  0xFF, 0xD0, 0x77, 0x72, 0x07, 0xFF, 0xB0, 0x77, 0x74, 0x07, 0xFF, 0x90, 0x77, 0x76, 0x07, 0xFF,
  0xF7, 0x1F, 0xFF, 0xF7, 0x1F, 0xFF, 0xF7, 0x1F, 0xFF, 0xF7, 0x18, 0x0A, 0xB2, 0xF0, 0xDF, 0xFF,
  0xFE, 0x0D, 0x0A, 0xFF, 0xFF, 0xE8, 0x1A, 0x1E, 0xFF, 0xFF, 0xC8, 0x4E, 0x10, 0x1A, 0xDF, 0xFF,
  0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_unarchive() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(6, 6, 41, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_unarchive_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_undo 48x48, 4-bit Alpha,  RLE, 138 bytes.
static const uint8_t ic_sharp_48_content_undo_data[] PROGMEM = {
  0x07, 0x80, 0xC4, 0x09, 0x07, 0x80, 0xC3, 0x0A, 0x07, 0x75, 0x89, 0x22, 0x7A, 0xBD, 0xEF, 0xDC,
  0xA7, 0x37, 0x7B, 0x07, 0x71, 0x81, 0x29, 0xDF, 0xD8, 0x1E, 0x82, 0x74, 0xC0, 0x75, 0x02, 0x09,
  0xFF, 0xC0, 0xA0, 0x27, 0x2D, 0x07, 0x30, 0x7F, 0xFF, 0x90, 0x77, 0x1E, 0x81, 0x71, 0xBF, 0xFF,
  0xB0, 0xC0, 0x16, 0xF0, 0xEF, 0x83, 0xEB, 0x63, 0x12, 0x83, 0x13, 0x6A, 0xEF, 0x0D, 0x02, 0x5F,
  0xE0, 0xE0, 0x77, 0x50, 0x60, 0xDE, 0x0E, 0x02, 0x4F, 0xD0, 0x87, 0x72, 0x07, 0xE0, 0xD0, 0x13,
  0xFB, 0x0E, 0x03, 0x77, 0x40, 0x20, 0xDD, 0x0C, 0x3F, 0xC0, 0x77, 0x75, 0x01, 0x0C, 0xD0, 0x72,
  0xFD, 0x07, 0x77, 0x50, 0x10, 0xDC, 0x0E, 0x02, 0x1F, 0xE0, 0x77, 0x75, 0x02, 0xD0, 0xA1, 0xFF,
  0x07, 0x77, 0x50, 0x7D, 0x02, 0xFF, 0x90, 0x77, 0x75, 0x0D, 0xC0, 0x8F, 0xFA, 0x07, 0x77, 0x40,
  0x6B, 0x0D, 0x08, 0xFF, 0xB0, 0x77, 0x74, 0x81, 0xD8, 0x32,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_undo() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 14, 44, 31), Box(0, 0, 47, 47),
      ic_sharp_48_content_undo_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_upcoming 48x48, 4-bit Alpha,  RLE, 173 bytes.
static const uint8_t ic_sharp_48_content_upcoming_data[] PROGMEM = {
  0x77, 0x4C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x80, 0xC0, 0x0C, 0x77, 0x71,
  0x01, 0x76, 0xC7, 0x60, 0x17, 0x81, 0x4F, 0x57, 0x5C, 0x75, 0x81, 0x5E, 0x45, 0x04, 0xB0, 0x57,
  0x4C, 0x74, 0x05, 0xB0, 0x43, 0x01, 0x0E, 0xC0, 0x57, 0x3C, 0x73, 0x05, 0xC0, 0xE0, 0x13, 0x04,
  0xD0, 0x57, 0x2C, 0x72, 0x05, 0xD0, 0x45, 0x04, 0xD0, 0x57, 0x76, 0x05, 0xD0, 0x47, 0x04, 0xD0,
  0x57, 0x74, 0x05, 0xD0, 0x47, 0x20, 0x4D, 0x04, 0x77, 0x20, 0x4D, 0x04, 0x74, 0x04, 0xB0, 0xC0,
  0x17, 0x72, 0x01, 0x0C, 0xB0, 0x47, 0x68, 0x24, 0xFC, 0x17, 0x74, 0x82, 0x1C, 0xF4, 0x77, 0x10,
  0x40, 0x17, 0x76, 0x01, 0x04, 0x80, 0x9A, 0x50, 0x81, 0x1A, 0xDF, 0xB7, 0x5F, 0xB8, 0x4D, 0xA1,
  0x01, 0xEF, 0xD0, 0x37, 0x30, 0x3F, 0xD8, 0x1E, 0x1A, 0xFE, 0x08, 0x73, 0x08, 0xFE, 0x0A, 0x0D,
  0xFF, 0x02, 0x71, 0x02, 0xFF, 0x0D, 0xFF, 0x90, 0xD0, 0x26, 0x02, 0x0D, 0xFF, 0xFF, 0xC0, 0x80,
  0x32, 0x03, 0x08, 0x80, 0xD9, 0x5F, 0x0D, 0x80, 0xC2, 0xF0, 0xD0, 0xA8, 0x0C, 0x2F, 0x81, 0xA1,
  0xE8, 0x0C, 0x0F, 0x84, 0xE1, 0x01, 0xAD, 0xFF, 0xFF, 0xC8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_upcoming() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 6, 43, 41), Box(0, 0, 47, 47),
      ic_sharp_48_content_upcoming_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_waves 48x48, 4-bit Alpha,  RLE, 319 bytes.
static const uint8_t ic_sharp_48_content_waves_data[] PROGMEM = {
  0x68, 0x61, 0x58, 0x99, 0x85, 0x17, 0x58, 0x61, 0x58, 0x99, 0x85, 0x17, 0x30, 0x40, 0xBF, 0x90,
  0xB0, 0x47, 0x10, 0x40, 0xBF, 0x90, 0xB0, 0x46, 0x05, 0x0C, 0xFD, 0x0C, 0x05, 0x40, 0x50, 0xCF,
  0xD8, 0x3C, 0x51, 0x0E, 0xFF, 0xC0, 0xD0, 0xEF, 0xFF, 0xD8, 0x4A, 0x53, 0x35, 0xAF, 0xF8, 0x4A,
  0x53, 0x35, 0xAF, 0xC8, 0x1E, 0x81, 0x60, 0x10, 0x8F, 0xA8, 0x1E, 0x81, 0x60, 0x10, 0x8D, 0x82,
  0xED, 0xA6, 0x74, 0x87, 0x16, 0xAD, 0xEE, 0xDA, 0x67, 0x48, 0x31, 0x6A, 0xDE, 0x80, 0x9A, 0x20,
  0x86, 0x38, 0xBB, 0xBB, 0x84, 0x75, 0x86, 0x37, 0xBB, 0xBB, 0x84, 0x73, 0x06, 0x0C, 0xF9, 0x0D,
  0x06, 0x71, 0x06, 0x0C, 0xF9, 0x0D, 0x06, 0x58, 0x12, 0x7E, 0xFD, 0x81, 0xE7, 0x22, 0x81, 0x27,
  0xEF, 0xD8, 0x1E, 0x72, 0x18, 0x0D, 0x2F, 0x86, 0xE8, 0x31, 0x13, 0x8E, 0xFD, 0x86, 0xE8, 0x31,
  0x13, 0x8E, 0xFB, 0x81, 0xD7, 0x17, 0x07, 0x0E, 0xF9, 0x81, 0xD7, 0x17, 0x07, 0x0E, 0xC8, 0x2D,
  0xB8, 0x47, 0x58, 0x64, 0x9B, 0xDD, 0xB9, 0x47, 0x58, 0x24, 0x9B, 0xD8, 0x09, 0xA2, 0x08, 0x65,
  0x9C, 0xDD, 0xC9, 0x57, 0x58, 0x65, 0x9C, 0xDD, 0xC9, 0x57, 0x28, 0x11, 0x7E, 0xF9, 0x81, 0xE7,
  0x16, 0x81, 0x17, 0xDF, 0x98, 0x1E, 0x71, 0x38, 0x12, 0x49, 0xFE, 0x85, 0xE9, 0x42, 0x24, 0x9F,
  0xE8, 0x2E, 0x94, 0x28, 0x0D, 0x2F, 0x81, 0xD6, 0x22, 0x81, 0x26, 0xDF, 0xD8, 0x1D, 0x62, 0x28,
  0x12, 0x6D, 0xFB, 0x0C, 0x05, 0x71, 0x05, 0x0C, 0xF9, 0x0C, 0x05, 0x71, 0x05, 0x0C, 0xC8, 0x2B,
  0xA7, 0x37, 0x58, 0x63, 0x7A, 0xBB, 0xA7, 0x37, 0x58, 0x23, 0x7A, 0xB8, 0x09, 0xA1, 0x08, 0x21,
  0x7B, 0xDA, 0x82, 0xDB, 0x71, 0x73, 0x82, 0x17, 0xBD, 0xA8, 0x2D, 0xB7, 0x17, 0x10, 0x20, 0x9F,
  0xB0, 0x90, 0x26, 0x02, 0x09, 0xFB, 0x09, 0x02, 0x38, 0x13, 0x6A, 0xFF, 0x84, 0xA5, 0x33, 0x6A,
  0xFF, 0x81, 0xA5, 0x3F, 0xA0, 0xE0, 0xDF, 0xFC, 0x0E, 0x0D, 0xFF, 0x90, 0xC0, 0x54, 0x05, 0x0C,
  0xFD, 0x0C, 0x05, 0x40, 0x50, 0xCF, 0xB0, 0xB0, 0x47, 0x10, 0x40, 0xBF, 0x90, 0xB0, 0x47, 0x10,
  0x40, 0xBC, 0x82, 0x98, 0x51, 0x75, 0x86, 0x15, 0x89, 0x98, 0x51, 0x75, 0x82, 0x15, 0x89,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_waves() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 7, 43, 40), Box(0, 0, 47, 47),
      ic_sharp_48_content_waves_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_web_stories 48x48, 4-bit Alpha,  RLE, 199 bytes.
static const uint8_t ic_sharp_48_content_web_stories_data[] PROGMEM = {
  0x18, 0x11, 0xAD, 0xFF, 0xC8, 0x1D, 0xA1, 0x77, 0x20, 0x10, 0xEF, 0xFF, 0x90, 0xE0, 0x17, 0x71,
  0x0A, 0xFF, 0xFB, 0x0A, 0x77, 0x10, 0xDF, 0xFF, 0xB0, 0xD7, 0x71, 0xFF, 0xFD, 0x48, 0x1D, 0xA1,
  0x71, 0xFF, 0xFD, 0x4A, 0x0E, 0x01, 0x7F, 0xFF, 0xD4, 0xB0, 0xA7, 0xFF, 0xFD, 0x4B, 0x0D, 0x7F,
  0xFF, 0xD4, 0xC4, 0x0D, 0x08, 0x1F, 0xFF, 0xD4, 0xC4, 0xA0, 0x8F, 0xFF, 0xD4, 0xC4, 0xA0, 0xDF,
  0xFF, 0xD4, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF,
  0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF,
  0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF,
  0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF,
  0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xFF, 0xFF, 0x94, 0xC4, 0xA0, 0xDF, 0xFF, 0xD4, 0xC4,
  0xA0, 0x8F, 0xFF, 0xD4, 0xC4, 0x0D, 0x08, 0x1F, 0xFF, 0xD4, 0xB0, 0xD7, 0xFF, 0xFD, 0x4B, 0x0A,
  0x7F, 0xFF, 0xD4, 0xA0, 0xE0, 0x17, 0xFF, 0xFD, 0x48, 0x1D, 0xA1, 0x71, 0x0D, 0xFF, 0xFB, 0x0D,
  0x77, 0x10, 0xAF, 0xFF, 0xB0, 0xA7, 0x71, 0x01, 0x0E, 0xFF, 0xF9, 0x0E, 0x01, 0x77, 0x28, 0x11,
  0xAD, 0xFF, 0xC8, 0x1D, 0xA1, 0x77, 0x20,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_web_stories() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(4, 4, 44, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_web_stories_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_weekend 48x48, 4-bit Alpha,  RLE, 148 bytes.
static const uint8_t ic_sharp_48_content_weekend_data[] PROGMEM = {
  0x78, 0x11, 0xAD, 0xFF, 0xFB, 0x81, 0xDA, 0x17, 0x60, 0x10, 0xEF, 0xFF, 0xF0, 0xE0, 0x17, 0x50,
  0xAF, 0xFF, 0xFA, 0x0A, 0x75, 0x0D, 0xFF, 0xFF, 0xA0, 0xD7, 0x5F, 0xFF, 0xFC, 0x75, 0xFF, 0xFF,
  0xC7, 0x5F, 0xFF, 0xFC, 0x75, 0xFF, 0xFF, 0xC7, 0x50, 0x8F, 0xFF, 0xFA, 0x09, 0x76, 0x02, 0x0E,
  0xFF, 0xFD, 0x0E, 0x02, 0x71, 0x86, 0x1A, 0xDD, 0xA1, 0x02, 0xFF, 0xFD, 0x89, 0x12, 0x01, 0xAD,
  0xDA, 0x10, 0x1E, 0xC8, 0x2E, 0x10, 0x9F, 0xFF, 0xB8, 0x29, 0x01, 0xEC, 0x81, 0xE1, 0xAE, 0x81,
  0xA0, 0x3F, 0xFF, 0xB8, 0x13, 0x0A, 0xE0, 0xA0, 0xDE, 0x81, 0xD0, 0x1F, 0xFF, 0xB8, 0x11, 0x0D,
  0xE0, 0xDF, 0x92, 0xFF, 0xFB, 0x2F, 0xFA, 0x2F, 0xFF, 0xB2, 0xFF, 0xA2, 0xFF, 0xFB, 0x2F, 0xFA,
  0x2F, 0xFF, 0xB2, 0xFF, 0xA7, 0x77, 0x7F, 0xFA, 0x77, 0x77, 0x80, 0xAE, 0x4F, 0x0D, 0x80, 0xC6,
  0xF0, 0xD0, 0xA8, 0x0C, 0x6F, 0x81, 0xA1, 0xE8, 0x0C, 0x4F, 0x84, 0xE1, 0x01, 0xAD, 0x80, 0xC0,
  0xF8, 0x1D, 0xA1, 0x10,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_weekend() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(2, 10, 45, 37), Box(0, 0, 47, 47),
      ic_sharp_48_content_weekend_data, Alpha4(color::Black));
  return value;
}

// Image file ic_sharp_48_content_where_to_vote 48x48, 4-bit Alpha,  RLE, 232 bytes.
static const uint8_t ic_sharp_48_content_where_to_vote_data[] PROGMEM = {
  0x72, 0x89, 0x03, 0x7B, 0xDE, 0xED, 0xB7, 0x37, 0x72, 0x05, 0x0D, 0xFB, 0x0D, 0x05, 0x75, 0x01,
  0x0B, 0xFF, 0x0B, 0x01, 0x72, 0x03, 0x0E, 0xFF, 0xA0, 0xE0, 0x37, 0x03, 0xFF, 0xE0, 0x35, 0x01,
  0x0E, 0xFF, 0xE0, 0xE0, 0x14, 0x0B, 0xFF, 0xF9, 0x0B, 0x30, 0x5F, 0xFF, 0xB0, 0x52, 0x0D, 0xFF,
  0xC0, 0xA0, 0x5C, 0x81, 0xD0, 0x3F, 0xFC, 0x0A, 0x20, 0x5C, 0x03, 0x07, 0xFF, 0xB0, 0xA4, 0x05,
  0xB0, 0x70, 0xBF, 0xFA, 0x0A, 0x50, 0xAB, 0x0B, 0x0D, 0xFF, 0x90, 0xB5, 0x0A, 0xC0, 0xD0, 0xEF,
  0xF0, 0xB5, 0x09, 0xD0, 0x0E, 0xD0, 0x80, 0xCE, 0x0B, 0x50, 0x9E, 0x0E, 0x0D, 0xC8, 0x27, 0x01,
  0xCC, 0x0B, 0x50, 0x9F, 0x0D, 0x0B, 0xB0, 0x73, 0x01, 0x0C, 0xA0, 0xB5, 0x09, 0xF9, 0x0B, 0x08,
  0xB0, 0x74, 0x81, 0x1C, 0xB5, 0x09, 0xFA, 0x08, 0x04, 0xC0, 0x74, 0x01, 0x50, 0x9F, 0xB8, 0x14,
  0x0E, 0xC0, 0x77, 0x10, 0x9F, 0xB0, 0xE2, 0x09, 0xD0, 0x76, 0x09, 0xFC, 0x09, 0x20, 0x3E, 0x07,
  0x40, 0x9F, 0xD0, 0x33, 0x0C, 0xE0, 0x72, 0x08, 0xFD, 0x0C, 0x40, 0x4F, 0x06, 0x08, 0xFE, 0x04,
  0x50, 0xCF, 0xFE, 0x0C, 0x60, 0x4F, 0xFE, 0x04, 0x70, 0xBF, 0xFC, 0x0B, 0x71, 0x02, 0xFF, 0xC0,
  0x27, 0x20, 0x8F, 0xFA, 0x08, 0x74, 0x0D, 0xFF, 0x0D, 0x75, 0x04, 0xFF, 0x04, 0x76, 0x09, 0xFD,
  0x09, 0x77, 0x10, 0xDF, 0xB0, 0xD7, 0x72, 0x03, 0xFB, 0x03, 0x77, 0x30, 0x7F, 0x90, 0x77, 0x75,
  0x0A, 0xE0, 0xA7, 0x76, 0x01, 0x0D, 0xC0, 0xD0, 0x17, 0x77, 0x02, 0x0E, 0xA0, 0xE0, 0x27, 0x77,
  0x20, 0x4A, 0x04, 0x77, 0x74, 0x00, 0x67, 0x60,
};

const RleImage4bppxBiased<Alpha4, ProgMemPtr>& ic_sharp_48_content_where_to_vote() {
  static RleImage4bppxBiased<Alpha4, ProgMemPtr> value(
      Box(10, 4, 37, 43), Box(0, 0, 47, 47),
      ic_sharp_48_content_where_to_vote_data, Alpha4(color::Black));
  return value;
}
